[
  {
    "objectID": "images/New project.html",
    "href": "images/New project.html",
    "title": "Set up a new project",
    "section": "",
    "text": "Create a new project in Nvivo\nOpen NVivo and click the ‘New Project’ tile on the welcome page.\nIf you already have a project open in NVivo, go to ‘File’ on the ribbon and select ‘New’. **Insert screenshot of opening a new project\n\n\nProject setup\nAdd a project title.\nThe file name will be automatically generated, but you may want to adjust where this is being saved to.\nYou can enter a description of the project at this stage as well. While not required, it’s good practice to include something here.\nNext, choose your preferred save and recovery settings.\nNB: the default settings are to have autosave disabled with save prompts every 15 minutes, which is quite useful. If you turn on autosave, undo functions are disabled.\n**Insert screenshot\n\n\nOptional tour\n\nYou will be prompted to take a quick tour of Nvivo, which will outline:\n+ Importing data + Cases + Notes + Queries + Visualizations + Centralizing workflow\nSkip for now – but may be worth coming back to in the future."
  },
  {
    "objectID": "Organising codes.html",
    "href": "Organising codes.html",
    "title": "Organising codes",
    "section": "",
    "text": "Connections between codes\nAfter a few rounds of open coding, and some reflection as you along, some hierarchical structures might emerge.\n\n\n\n\n\n\n🤔 Critical Considerations\n\n\n\nLook at your open codes and ask yourself:\n\nAre there any common themes that might make a good ‘parent code’?\nDo any codes refer to a theme or idea that may be experienced in a number of different ways (different sources, targets, circumstances, etc.)?\nAre there any common categories that would be useful to think with across many codes and examples?\nDo some of your codes exist within a common theme that could become a parent code?\nDoes it make sense to nest down, or create a new top code?\n\n\n\n\nNVivo jargon: top level codes are called ‘parent codes’; sub-codes are called ‘child codes’.\n\n\n\nHierachical tree coding\n\nAs we’ve already shown you, you can create a new parent code and drag in existing codes as sub-codes\nYou can also create new ‘child nodes’ i.e. subcodes of existing codes.\nYou can collapse codes by right clicking-&gt;copy- Merge into selected code\n\n\n\n\nRecommendations\n\nFor beginners, and at the very start of coding, 2 levels are probably enough\nMore than 3-4 levels becomes unwieldy",
    "crumbs": [
      "Start Coding",
      "**Coding in NVivo**",
      "Organising codes"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "If you are new to qualitative enquiry, please see the Primers page for recommended introduction materials."
  },
  {
    "objectID": "resources.html#lumiveros-nvivo-resources",
    "href": "resources.html#lumiveros-nvivo-resources",
    "title": "Resources",
    "section": "Lumivero’s NVivo Resources",
    "text": "Lumivero’s NVivo Resources\n\nUser Help Pages\nBelow are links to Lumivero’s NVivo User Help pages for the more recent Windows and MacOS versions of NVivo.\nWindows:\n\nNVivo 12\nNVivo Release 1\nNVivo 14\nNvivo 15\n\nMacOS:\n\nNVivo 12\nNVivo Release 1\nNVivo 14\nNvivo 15\n\n\n\nOther online Lumivero resources\n\nNVivo YouTube Channel\nNVivo Podcast series\nLumivero Webinars and Events (for payment, some webinars are free)\nNVivo Knowledge Base\nNVivo Customer Hub (requires Lumivero username and password to log in)"
  },
  {
    "objectID": "resources.html#recommended-reading",
    "href": "resources.html#recommended-reading",
    "title": "Resources",
    "section": "Recommended Reading",
    "text": "Recommended Reading\n\nQualitative Analysis Software\nThe best texts on using software for qualitative analysis:\n\nJackson, Kristi, and Pat Bazeley. (2019) Qualitative Data Analysis with NVivo. 3rd ed. Thousand Oaks, CA: SAGE Publications Ltd.\n\nPDF for Chapter 1 - ‘Where to begin?’\nClick by click instructions accompanying the book.\n\nBazeley, Pat. (2017) ‘Using Qualitative Data Analysis Software (QDAS) to Assist Data Analyses’. Pp. 1–18 in Handbook of Research Methods in Health Social Sciences, edited by P. Liamputtong. Singapore: Springer.\n\nOpen access copy.\n\n\n\n\nQualitative Analysis - how to resources\nAlso useful as a basis for understanding qualitative analysis, coding, and writing up more generally:\n\nBazeley, Pat. 2020. Qualitative Data Analysis: Practical Strategies. 2nd ed. London: SAGE Pubications.\n\nHard-copies available in most university libraries.\n\nSaldaña, Johnny. (2013) The Coding Manual for Qualitative Researchers. 2nd ed. London: Sage Publications Ltd.\n\nAn Introduction to Codes and Coding PDF of Chapter 1.\n\n\n\n\nExamples of applied use of NVivo\n\nByrne, David. (2022) ‘A Worked Example of Braun and Clarke’s Approach to Reflexive Thematic Analysis’. Quality & Quantity 56(3):1391–1412. doi: 10.1007/s11135-021-01182-y.\nHutchison, Andrew John, Lynne Halley Johnston, and Jeff David Breckon. (2010) ‘Using QSR‐NVivo to Facilitate the Development of a Grounded Theory Project: An Account of a Worked Example’. International Journal of Social Research Methodology 13(4):283–302. doi: 10.1080/13645570902996301.\n\n\n\nOther qualitative analysis software\nNvivo is the market leader but some other popular ones are listed below:\nSubscription/licenced software:\n\nATLAS.ti,\nMAXQDA,\nDedoose.\n\nFree /open source:\n\nTaguette."
  },
  {
    "objectID": "Adding metadata.html",
    "href": "Adding metadata.html",
    "title": "Adding metadata",
    "section": "",
    "text": "Right now, when we look at our cases, they don’t have attributes or metadata:\n\nNow we will create ‘case classifications’, bringing in the metadata related to each file or individual.\nThis could be any number of things, for example socio-demographics like age or gender, or that person’s response to a survey.\n\nMetadata file\nIn the project files you downloaded, in the folder ‘research tools’, open and check the excel sheet entitled ‘metadata’:\n\nThis file contains information on our participants from the 2016 interviews. We are trying to match this with our existing case classification of ‘People’, so we need to make sure it’s formatted the same way to enable it to match.\nSo check that:\n\nThe first column - ‘People’- indicate the cases. Check this is typed the same way in your Nvivo project setup.\nThe names in this first column should match the formatting of the cases and the interview file names in Nvivo - and this is case sensitive (i.e. if it’s vince it must also be ‘vince’ and not ‘Vince’)\n\n\n\n\nImport classification sheet\n\n\nFrom the Import ribbon tab, select ‘classifications’ and then ‘Import classification sheets’.\n\n\n\nSelect the ‘metadata.xls’ file from the ‘Research tools’ folder.\nClick Open to select file.\nThen click Next on the import Wizard:\n\n\n\nSet classification type as ‘case classification’.\n\nYou can select or deselect if you want to create new attributes, update existing classifications, or replace existing attribute values.\n\nClick Next.\n\n\nN.B. to set up ‘file classifications’, follow the same process but select ‘file classifications’ here (might include similar demographic info as well as things like location of interview, who interviewer was, time, date, etc.)\n\n\nChoose to represent files ‘as hierarchical names’; click next.\n\n\n\n\nSelect how you want blank attributes, dates, time and numbers to be represented.\n\n\nClick finish.\n\n\nNow, check that case info has been imported to existing ‘People’ classification. You can see that the first row of the excel sheet linked with the cases that already existed, and now you have columns indicating exactly the columns that were in the spreadsheet.\n\n\n\nManually add new cases\n\nClick on the ‘cases’ on left hand menu, then right click on the open space in the ‘List View’ under your cases and select ‘New Case’, or use shortcut or Ctrl+Shift+N.\n\n\n\n\nInput any name / description for the case under ‘General’\n\n\n\n\n\nSelect relevant attributes under ‘Attribute values’\nSelect case classification as ‘People’\nYou can assign values from the drop down box for each attribute\n\nSelect OK.\n\n\nYou can see a new case for ‘roger’ has been set up; it doesn’t have any files or attributes attached yet.\n\n\n\nCreate new attributes for an existing case\nYou might want to create a new attribute i.e. a new column in the metadata for some feature which varies between your cases.\nWe are going to create a new attribute ‘2015 pre-election’ that indicates whether they also took part in the 2016 pre-election focus group.\n\n\nClick on Case Classifications-&gt; People\nIn the home ribbon, go to Case classification -&gt; new attribute\n\n\n\n\n\nIn the ‘General’ tab, enter the name (‘2015 pre-election’) and a description, then move to the ‘Values’ tab.\n\n\n\n\n\nAnother way to do this is, within a case, scroll to the bottom of the list of attributes and click new attribute (step 1 below)\nThen follow the same steps as above\n\n\n\n\n\nClick the values tab to assign possible options for the attribute\nWe are going to make this yes/ no, so click ‘Add’ -&gt; enter ‘Yes’, ‘Add’ -&gt; enter ‘no’\nSelect ‘OK’ /done:\n\n\n\nN.B. default is set to ‘unassigned’ – you can change this depending on your preference\nNow this column will appear as the last column in your case classifications sheet, but it is empty with no values (i.e. ‘unassigned’)\n\n\nYou can set values for this new attribute by clicking on the drop-down arrow.\n\n\n\n\n\nSummarise metadata in charts\nNow that you have some basic information attached to the transcripts, you can summarize this in a basic way using Nvivo’s chart function. This depends very much on how the metadata in the classification sheet are formatted, but so long as this is consistent, it can be very useful for getting a quick glance at your sample composition.\nFor example, here we want to understand voting patterns within the sample.\n\n\nIn the top ribbon, go to the ‘Explore’ tab, and choose ‘chart’\n\n\n\n\n\nOn the chart wizard, choose ‘cases’, then ‘next’.\n\n\n\n\n\nAt the next stage, choose ‘cases by attribute value for an attribute’ - this will chart the values of one attribute/variable. You have the choice to chart two attributes at the same time, this will create a 3 way bar chart. But let’s just do one at a time for this example.\n\n\n\n\n\nAt the next stage, select the attribute you want to chart by clicking ‘select’\nThen expand the list of attributes by clicking the plus symbol next to ‘People’\nChoose ‘2016 vote’, and click OK.\n\n\n\n\n\nFinally, you get the choice of how the values of the attribute are displayed on the x-axis. We leave it as the default, but you can choose alphabetical etc. Click finish.\n\n\n\n\nNow you will see a simple bar chart displayed. You can edit the title, labels etc and much more in the top ribbon. You can also export or print chart (1).\nYou can just see a numerical summary (rather than the bar chart) by clicking ‘summary’ on the far right of the screen (2)\nNote there is 1 case for whom this attribute is blank or ‘unassigned’- this is roger, the case we just created. (3)\nThere are many more complex charts you can create once you have more complex and appropriately formatted data; you can also make charts based on codes you have created.",
    "crumbs": [
      "Project Setup",
      "**Set up a new project**",
      "Adding metadata"
    ]
  },
  {
    "objectID": "buildingthemes.html#framework-matrices",
    "href": "buildingthemes.html#framework-matrices",
    "title": "Building Themes",
    "section": "Framework Matrices",
    "text": "Framework Matrices\n\nCreating a Framework Matrix\n\nNotes &gt; Framework Matrices\n\n\nRight-click in white space.\nSelect ‘New Framework Matrix…’\n\n\n\nProvide it with a suitable name.\n\n\n\nSelect the Rows tab.\nUse the left-hand ‘Select’ button to open a dialogue and select the Participant case folder.\nUse the right-hand ‘Select’ button to open a dialogue and select 1-4 attributes from the People classification that will be used to sort how the rows for participant cases will be ordered.\n(Optional) if you pick more than one attribute, you can use the up/down arrows on the right, in blue, to change their order.\n\n\n\nSelect the Colums tab.\nUse the ‘Select’ button to pick codes to use as columns, in this case select the ‘Auto-Code (Sections)’ folder.\n(Optional) use the arrows on the right to change the order of the codes.\n\nHit ‘OK’ and after a few seconds the Framework Matrix will have been created and will automatically open.\n\n\nViewing a Framework Matrix\nWhen viewing a framework matrix, the matrix itself appears in the middle and, by default, an ‘associated view’ appears on the right. This view, as the name suggestions, shows content associated with the framework matrix.\n\nYou can change what precise content is displayed by clicking the ‘Associated View’ button on the Ribbon Bar. (If it is not visible, click inside a framework matrix cell first.)\n\nRow Coding - show all content coded by the case the row is for.\nCell Coding - show all content coded by the row case AND the column code.\nSummary Links - show only content whether a summary link has been made between text in the cell and the associated view.\n\n\nSimilarly, what gets highlighted in the Associated View can be changed by clicking the ‘Highlight’ button on the Ribbon bar.\n\nNone - turn off highlighting.\nColumn Coding - highlight everything in the Associated View coded at the code for the currently selected column.\nSummary Links - highlight text in the Associated View that has a summary link with text in the currently selected cell.\nSummary Links from Position - highlight text in the Associated View that has a summary link with text for where the tex cursor is currently within the selected cell.\nAuto Scroll - a useful option to turn on, when on if you click text in the cell that has a summary link, the Associated View will immediately scroll to where the linked text is within the Associated View.\n\n\n\nSummary Links\n\nTo create a summary link:\n\nSelect text within a Framework Matrix cell (highlighted in blue).\nSelect text within the Associated View (highlighted in black).\nClick the ‘New Summary Link’ button in the Ribbon bar."
  },
  {
    "objectID": "buildingthemes.html#reusable-cells",
    "href": "buildingthemes.html#reusable-cells",
    "title": "Building Themes",
    "section": "Reusable Cells",
    "text": "Reusable Cells\nSomething not immediately clear when using Framework Matrices is that the cells actually exist independently of any given matrix. Behind the scenes each cells is stored by on its intersection, the case and code combination it relates to. A cell then will appear in all framework matrices which has that case and code.\nAfter adding some text to cells in the ‘ANY OTHER COMMENTS’ and ‘INTRODUCTION’ columns - even if just gibberish:\n\nCreate a new Framework Matrix.\nFor rows use the cases in the ‘Remain Interview Participants’ dynamic set.\nFor columns select only the ‘ANY OTHER COMMENTS’ and ’INTRODUCTION’codes.\n\nThis makes cells within Framework Matrices ‘composable’, you can make various larger and smaller matrices based on particular analysis aims without risking losing text or accidentally duplicating work."
  },
  {
    "objectID": "buildingthemes.html#re-casing",
    "href": "buildingthemes.html#re-casing",
    "title": "Building Themes",
    "section": "Re-Casing",
    "text": "Re-Casing\nOne limitation with Framework Matrices is that Rows must be cases and Columns codes. However, this is another situation where dynamic sets and queries can come to the rescue.\nFirst:\n\nCreate a new Coding Query\nFor criteria, ‘Coded to’, ‘Any Selected Code or Case’, in the ‘Remain Interview Participants’ dynamic set.\n‘Save Criteria…’ as Sections Coded at Remain Interview Participants.\nClick wee triangle next to ‘Run Query’ and select ‘Run and Save Results’\nIn the Store Query Results dialogue on the Location row, click ‘Select…’\nSelect the ‘Cases’ folder as the location and hit ‘OK’\nGive it a suitable name, such as “Remain Supporters”\nHit ‘OK’.\n\nThen:\n\nCreate a new dynamic folder ‘Leave Interview Participants’ with criteria ‘Code’, ‘That Codes’, any items in the ‘Interviews (2016)’ folder.\nCreate (and save) a new Coding Query, ‘Coded to’, ‘Any Selected Code or Case’, in the ‘Leave Interview Participants’ dynamic set.\n‘Run and Save Results’ to a new case in the ‘Cases’ folder, “Leave Supporters”\n\nFinally:\n\nCreate a new Framework Matrix\nRows = “Remain Supporters” and “Leave Supporters”\nColumns = “Autocoded (Sections)”\n\nAnother example: 1. Create a new Framework Matrix 2. Rows, first add all individual cases from the ‘Remain Interview Participants’ dynamic set. 3. Rows, second add the ‘Remain Supporters’ case. 4. Columns = “Autocoded (Sections)”\nThis then provides a Framework Matrix with a row for each Remain supporting participant, and a row for summarising across all Remain supporters."
  },
  {
    "objectID": "Saving and sharing.html",
    "href": "Saving and sharing.html",
    "title": "Saving and sharing",
    "section": "",
    "text": "Saving the project\nIf you followed the default settings, we will have seen pop-ups every 15 minutes to ask us to save.\n\n\nTo remind yourself where the file is saved you can go to:\nFile &gt; Project Properties &gt; General\nand look at the location under File Name:\n\n\n\n\n\nIf you click on the ‘save and recovery’ tab you can alter the frequency of saving.\nYou also get the chance to set up a recovery option. This can be helpful if you are experiencing issues with Nvivo crashing.\n\n\n\n\n\nSharing with others\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nRemember: NVivo only has ‘forwards compatability’ between different versions.\nIf a project was created in NVivo 14 and someone was to open it in NVivo 15, they will be prompted to convert it to an NVivo 15 project file. However, once converted to an NVivo 15 compatable project file, it will no longer be possible to open it in NVivo 14. It is essential then that when collaborating with others that you are all using the same version of NVivo.\n\n\nYou can easily email or share the project (.nvp file) with others using the same version of NVivo.\nIf you want to share with a mac user, you also need to convert it before you share it.\n\n\nTo do this, open the file tab -&gt; Copy project\n\n\n\n\n\nCopy to, Nvivo (Mac), and choose a save location.\n\n\n\nThe conversion to mac and vice versa may take some time.\nAfter the conversion is complete, you should have created a duplicate mac version fo the file in .nvpx format.\nMore information here.",
    "crumbs": [
      "Project Setup",
      "**Set up a new project**",
      "Saving and sharing"
    ]
  },
  {
    "objectID": "Open coding.html",
    "href": "Open coding.html",
    "title": "Open coding",
    "section": "",
    "text": "What is open coding?\n‘Open coding’ refers to inductive forms of coding, where meaning emerges from the data through the researcher engaging with the content and deciding to create a code.\nCodes are not pre-defined; they emerge through the analysis.\n\n\n\n\n\n\n🤔 Critical Considerations\n\n\n\nBefore jumping into open coding, let’s consider:\n\nwhat themes we might expect to emerge from this dataset?\n\nwhat kinds of phenomena might be want to capture with open coding?\n\n\n\n\n\nCoding based on attitudes/emotions\nWe know there are likely to be strong opinions expressed, so let’s set up some attitude codes that we can quickly apply while reading the interviews:\n\n\nCreate a new parent code by either 1) selecting Create-&gt;code on the top ribbon or 2) right- clicking in the open space under the codes and selecting ‘new code’:\n\n\n\n\n\nGive this new code the title ‘Attitude’ (1), give it a rich description (remember your future self) (2),\nDo not ‘aggregate coding from children’ for the attitude parent code (3), as we would seldom search for something including everything coded at any type of attitude. This can be toggled on later if needed, though.\n\n\n\nNext, we want to create sub-codes within ‘Attitude’ for:\n\nMixed\nNegative\nNeutral\nPositive\n\n\n\nTo create a sub-code right-click an existing code and select ‘new code’:\n\n\n\nYou can see you now have a basic set of attitude codes to code to as you read the transcripts:\n\n\n\nCreate new code based on ideas emerging in the data\nAs you read, you may start to notice a key theme/idea/concept popping up throughout that doesn’t fit into an attitude that you have pre-defined. You may decide that this deserves its own new code. For example, the theme of ‘immigration’ emerges repeatedly\n\n\nCreate a new code for this in the same way as before…\n\n\n\n\nPractice open coding\n\n\nSpend some time open coding by reading thorough the interviews in the 2016 interview folder.\nAs you go along, code to existing codes or make new ones for recurring ideas. Don’t worry about going back and coding something that might not have occurred to you earlier in the interview or in previous interviews.\n\n\n\nRemember that coding is iterative! and the same piece of text can have MULTIPLE CODES.\n\n\n\nReflexive coding\n\n\n\n\n\n\n🤔 Critical Considerations\n\n\n\nAfter reading a few interviews, take a break to revisit your codes.\n\nAre there any common themes that might make a good ‘parent code’?\nis there something that stands out in your mind from reading that you don’t see in your coding?\n\n\n\n\nDon’t be afraid to re-code the same section with more than one thing (e.g. you might code one comment as ‘trust’, ‘Labour Party’, and ‘positive’).\nDon’t be afraid to make mistakes – you can always un-code!",
    "crumbs": [
      "Start Coding",
      "**Coding in NVivo**",
      "Open coding"
    ]
  },
  {
    "objectID": "Checking codes.html",
    "href": "Checking codes.html",
    "title": "Checking your work",
    "section": "",
    "text": "View material within each code\n\n\nDouble click on a code to view the material that has been coded. This aggregates information across multiple files and transcripts.\n\n\nHere is an example of seeing all material with the ‘economy’ code:\n\n\n\nCoding stripes\n\nTo see what you have (and haven’t) coded already, you can turn on coding stripes, which visualize the amount of text in the transcript coded against different codes. You may find that you’ve coded some areas mistakenly or missed other codes\n\n\nThe transcript now has vertical lines on the far right. These indicate the parts of the transcript which are coded to cases and codes. The colour codes are set automatically but you can manually adjust this by editing the code settings.",
    "crumbs": [
      "Start Coding",
      "**Coding in NVivo**",
      "Checking your work"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Session Brief\n\n\n\nThis one-day in-person workshop is aimed at those with no experience of Nvivo, or those who would like a refresher. We will move through three topics:\n\nThe morning is led by Dr Katy Keenan will work through some basic tasks:\n\nsetting up a new Nvivo project\norganising materials\ncreating cases and case classifications\nmanual coding\nsome autocoding features\n\nThe afternoon is led by Alasdair Stewart and will move to more advanced features and the flexible ways these can be used for qualitative analysis.\nStudents will learn how to use some more advanced features of NVivo:\n\ncoding workflows, tip and tricks\ndifferent types of queries\nframework matrices\n\nWe will use some curated open access qualitative data (the Qualitative Election Study of Britain). However, there is an opportunity to discuss how to use NVivo to manage your own project.",
    "crumbs": [
      "Intro",
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#session-aims",
    "href": "index.html#session-aims",
    "title": "Welcome!",
    "section": "Session Aims",
    "text": "Session Aims\n\n\n\n\n\n\n🤔 Critical Considerations\n\n\n\nThe sections and tasks for this workshop session are based around problems and considerations to make that you might encounter as your analysis progresses.\nWith each we will cover some conceptual points and a follow along demonstration that combines various NVivo features together to achieve an analysis aim.\nThe purpose of this is to explain features in context, the how and why you would want to use them, rather than just providing an abstract technical explanation of what they do.\nImportantly, after the follow along demonstrations, we will have time for experimentation and discussion. I have tried to identify common enough problems and considerations that will be encountered across different types of project. However, all the steps and features covered can be combined and deployed in a multitude of ways. Please use the ‘experiment and discuss’ sections to raise any questions about how what we are covering could be applied to your project or recombined for other analysis aims.\n\n\n\n\n\n\n\n\n🧟 Slaying QDAS Zombies\n\n\n\nTo say some qualitative researchers were initially resistant to qualitative data analysis software is an understatement. Early literature on the value of computing to qualitative analysis was filled with acerbic critiques, seeing software as undermining the rich in-depth analysis that qualitative analysis offers.\nThere was a partial truth to these criticisms as the nascent software was minimal in features and capabilities. What some critiques got wrong - or, at least, gave the impression of - though, was taking the limitations of the software as it was and treating these as inherent and inescapable.\nThe big four critiques - that software distances researchers from data by placing a barrier between them, strips qualitative methods of its diversity by homogenising coding and analysis, replaces the creativity of qualitative analysis with mechnical steps, and dehumanises participants by decontextualising their experiences - are not unavoidable dangers with modern software.\nHowever, the critiques unfortunately still persist as QDAS Zombies by being recounted again and again in the literature reviews of journal articles and books. That QDAS software is not overly friendly to new users - see below - unfortunately also keeps the zombie critiques going. When users struggle so much with the software that they find themselves turning to paper and pen – or copying chunks of text into Word/Excel files – it’s no wonder these critiques feel more alive than dead.\nWhat we will cover in this workshop should go towards dispelling that feeling by demystifying the features that help solve common problems and analysis aims beyond the basics. I’d go as far as arguing that once you gain a greater understanding and confidence in using contemporary qualitative analysis software, the zombie critiques are a greater risk when using paper and pen.\n\n\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nNVivo is powerful and without a doubt better than analogue paper and pen analysis – or worse, copying and pasting chunks of text into multiple Word/Excel files – but it remains far from perfect. It is needlessly bloated and clunky, and historically had a reputation for regularly crashing.\nThe unintuitive design and labyrinthine steps required for some tasks – never mind the joys of trying to recall them each time when first starting – gives the false impression that it is all overly-complex. It might not seem it now, but with perseverance the pieces start fitting together, and the initial overwhelm will dissipate into mild frustrations.\nTo Lumivero’s credit, the rate at which NVivo crashes has vastly reduced and is no longer a daily occurrence. However, it can still throw up the occasional unexpected error, freeze and lock-up, or decide to crash and die completely. This is most often ‘NVivo-error’ not ‘user-error’ – there was not anything wrong in how you set up your project or actions you were doing, it’s just NVivo being NVivo.",
    "crumbs": [
      "Intro",
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#note",
    "href": "index.html#note",
    "title": "Welcome!",
    "section": "Note",
    "text": "Note\n\n\n\n\n\n\n‘Living Documents’\n\n\n\nThese pages are ‘living documents’, they will continually and iteratively be updated over time. Please see the Callout on the About page for further details.",
    "crumbs": [
      "Intro",
      "Welcome!"
    ]
  },
  {
    "objectID": "going-further-slides.html",
    "href": "going-further-slides.html",
    "title": "Going Further - Slides",
    "section": "",
    "text": "TODO\n\n\n\n\nEmbed copy of slides\nAdd download link\n\n\n\nBelow is an embedded copy of the slides:\n[embed here]\nClick here[add link] to download a copy of the slides."
  },
  {
    "objectID": "orgnodes.html#adding-organisation-codes",
    "href": "orgnodes.html#adding-organisation-codes",
    "title": "Organisation Codes",
    "section": "Adding Organisation Codes",
    "text": "Adding Organisation Codes\n\n\nGo to the main ‘Codes’ folder.\nRight-click on any white space and select ‘New Code…’\n\n\n\nProvide it with a suitable name, such as ‘Organisation Codes’\nI have added “z - …” at the start as that ensure it’s placed at the end when alphabetically ordered.\n\n\n\nDrag and drop the existing ‘quotable quote’ code to become a child code of ‘z - Organisation Codes’.\n(Optional) rename it to ‘Gold’.\nCreate another two child codes ‘Unsure’ and ‘Example’.\n\n\n\n\n\n\n\nDifferent organisation codes\n\n\n\n\nThere are various different codes researchers make to to help with organising their coding. A few examples:\n\nExample - Use for coding sections that are serve as illustrative example of another code.\nGold - Use for coding sections that have high probability of later being used as a quote. (Though ensure to avoid cherry-picking!)\nImportant - Use for coding sections that are important for the analysis. (This can be distinct in many cases from ‘Gold’.)\nUnsure - Use for coding sections that are coded to another code, but you are unsure whether either it is right code for the section or this coded section is making you question the overall code.\n\nIMPORTANT - You do not need all of these! This is merely showing range of examples. Which and how many to have wil change based on personal preferences and analysis aims. For example, when working as part of a large team, ‘example’ can be useful for researchers to identify coded sections they think illustrate specific codes they are developing. This can then help inform discussion to agree a share coding schema for the project.\n\nAnother way to use codes for organising is having codes to store excerpts you intend to use / have used in specific articles or thesis chapters. This can be combined with queries as well to aid finding most relevant sections. For example, a Matrix Coding Query with your writing organisation codes with your main coding schema.\nDue to the much more niche use-case for these codes, they are definitely ones to chuck in their own folder to avoid cluttering the top-level folder.\n\n\n\nCode Matrix Query\nFirst:\n\nSelect two or three existing codes from the top-level Codes folder or ‘Autocoded (Theme)’ sub-folder.\nOpen tabs for to view the code results for each.\nQuickly go through coding sections from the code results to ‘Example’, ‘Gold’, and ‘Unsure’.\n\n\n\nGo to the Query Criteria folder\nRight-click and select New Query\nand, Matrix Coding Query\n\n\n\nRows = the regular codes you chose.\nColumns = Gold, Unsure, and Example.\nHit ‘Run Query’\nRemember to also ‘Save Criteria…’\n\nThis will then produce a coding matrix you can then use to find sections coded at both a regular and organisation code."
  },
  {
    "objectID": "orgnodes.html#memo-links",
    "href": "orgnodes.html#memo-links",
    "title": "Organisation Codes",
    "section": "Memo Links",
    "text": "Memo Links\n\nCreate a linked memo for one of your chosen regular codes:\n\nRight-click the code.\nSelect ‘Memo Link’.\nThen ‘Link to New Memo…’\n\n\nProvide an appropriate name. For memos linked to codes I tend to go with “m - Code Name” naming convention.\n\n\nAdd headers for ‘Example’, ‘Gold’,’ Unsure’.\n\nYou can then use the coding matrix results to read through content coded to both the code and the three organisation nodes. (Or, for time, add some lorem ipsum.)\n\nMemo See Also Links\nIt is possible to link text within a file to text within a memo.\n\n\nSelect the text you want to link to the memo text.\nRight-click and select ‘Copy’.\n\n\nBack in the memo:\n\nSelect the memo text you want to be linked.\nRight-click and select ‘Paste as See-Also Link’.\n\n\nSee also links appear in red highlighting and, similar to Annotations, a panel listing all See-Also Links within the current tab can be displayed at the bottom of the page.\n\nImportantly, if you right-click red highlighted text or any of the items listed in the See-Also Links panel, you can ‘Open To Item’. This will open a new tab for the file that contains the linked text, and will auto-scroll to the exact section the linked text appears.\n\n\nAutocode Memos\nAs an example of how flexible some of NVivos tools are, as with files, it is possible to autocode memos.\n\n\nRight-click the memo you created.\nSelect ‘Autocode…’\n\n\n\n\n\n\nChange ‘Under’ to ‘New Folder’\nProvide it an appropriate Name\nHit ‘Finish’\n\n\nThis may not seem like much with just a single memo, but if you had a series of structure memos this would let you quickly find and navigate them by specific sections."
  },
  {
    "objectID": "orgnodes.html#static-sets",
    "href": "orgnodes.html#static-sets",
    "title": "Organisation Codes",
    "section": "Static Sets",
    "text": "Static Sets\nGoing through the ‘Unsure’ sections, for example, may help you identify new code to create or ones to replace.\nSay you decided to create three new codes to outright replace three old ones, but this is made tricky as the each code does replace one code, but instead cuts across content in 2-3 of the old codes.\nThis is where static sets come in handy.\n\nAdd three existing Codes to the static set.\nWithin your ‘Codes’ top-level folder create three new codes of your choice, for simplicity I’m just going with ‘A’, ‘B’, ‘C’.\nAdd these to the ‘New Codes’ static set.\n\n\nCoded to Old Codes, but not New Codes\n\n\nCreate a new Matrix Coding Query.\nRows = ‘Old Codes’ static set.\nColumns = ‘New Codes’ static set.\nChange ‘Coding at rows … columns’ to Not.\n‘Run Query’\n\nThis will create a single cell, double-clicking will open a coding results tab with all sections coded at the codes in the ‘Old Codes’ static set.\nYou can now work your way recoding to the New Codes. Importantly, during recoding you can hit ‘Run Query’ and get an update of how many sections are left to recode. This can be extremely useful you whilst recoding you realise you actually need a fourth new code ‘D’. You can create it, add it to ‘New Codes’ static set and ‘Run Query’ for your ‘Recoding Old with New’ Matrix Code Query.\n\nRemember you can change the ‘coding content’ to view more text surrounding the sections coded to your old codes. That won’t make a difference for most of the codes in this project file, but if you only coded sentences or even short phrases, this will add back some additional context.\n\nSimilarly, you can turn on coding stripes and highlighting using the static set as a filter.\n\nThis can save a lot of headaches and frustration when if adopting a coding approach that have multiple stages in developing and refinding your codes or working on a large project with multiple researchers coding across different policy areas where you have a lot of codes across multiple folders that you may want retrieve quickly.\n\n\nOther uses for static sets\n\nGrouping conceptual related codes outside your main coding schema.\nCollating a mix of items (files, cases, codes) that are pertinent to an aspect of your analysis.\nMaking a group of participants with similar experiences, but where it would not necessarily make sense to capture it using Attributes."
  },
  {
    "objectID": "going-further/set-query-summary.html",
    "href": "going-further/set-query-summary.html",
    "title": "Summary",
    "section": "",
    "text": "These examples show different ways you can iteratively build upon your project structure as your analysis progresses.\n\nYour initial structure (folders, codes, cases) can be used to create dynamic sets or query for specific coded sections.\nIt is possible to add layers upon layers. A dynamic set can be used as part of a query - saving you having to repeat the specific criteria for it again and again.\n\nIt can be useful then, in addition to considering your ‘foundational’ structure to think about which dynamic sets can add a supporting additional layer to make other tasks easier in the long-term.\nIt can feel slow and clunky at first getting to grips with creating them, but as you create more your pace will quicken, and through combining them with queries start to more intuitively combine NVivo features in relation to questions that arise during analysis.\n\n\n\n\n\n\n\nDon’t panic!\n\n\n\nIt is not a problem if you have already started your analysis and not added some of the ways to structure a project file covered in this session.\n\nMost - such as auto-coding and creating folders - can be created at any stage.\nNot every project and analysis needs to use all of these structuring options. Some options also add equivalent structure in different ways, where there is some ‘aesthetic choice’ in which to use.\nIf your transcripts do not make use of headers to structure the main topics covered, you can still do manual ‘broad-brush’ coding. (If having this topic-level coding would benefit your analysis!)\n\nImportantly, for some project structure decisions there is no 100% right/wrong way to do it.\nIn the example covered we had a ‘Participants’ case folder, containing the cases for all participants, and used a dynamic set to get ‘Interview Participants’.\nAnother project structure may have case folders for ‘Interview participants’ and ‘Focus Group participants, and use a dynamic set to get ’All Participants’.\nNote, this would be feasible as long as the interview and focus group participants are two distinct groups. If some participants took part in both interviews and focus groups, then it would not be possible to have separate Cases folders for them, and the project would need to be structured similar to this example.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Summary"
    ]
  },
  {
    "objectID": "going-further/set-query-summary.html#summary",
    "href": "going-further/set-query-summary.html#summary",
    "title": "Summary",
    "section": "",
    "text": "These examples show different ways you can iteratively build upon your project structure as your analysis progresses.\n\nYour initial structure (folders, codes, cases) can be used to create dynamic sets or query for specific coded sections.\nIt is possible to add layers upon layers. A dynamic set can be used as part of a query - saving you having to repeat the specific criteria for it again and again.\n\nIt can be useful then, in addition to considering your ‘foundational’ structure to think about which dynamic sets can add a supporting additional layer to make other tasks easier in the long-term.\nIt can feel slow and clunky at first getting to grips with creating them, but as you create more your pace will quicken, and through combining them with queries start to more intuitively combine NVivo features in relation to questions that arise during analysis.\n\n\n\n\n\n\n\nDon’t panic!\n\n\n\nIt is not a problem if you have already started your analysis and not added some of the ways to structure a project file covered in this session.\n\nMost - such as auto-coding and creating folders - can be created at any stage.\nNot every project and analysis needs to use all of these structuring options. Some options also add equivalent structure in different ways, where there is some ‘aesthetic choice’ in which to use.\nIf your transcripts do not make use of headers to structure the main topics covered, you can still do manual ‘broad-brush’ coding. (If having this topic-level coding would benefit your analysis!)\n\nImportantly, for some project structure decisions there is no 100% right/wrong way to do it.\nIn the example covered we had a ‘Participants’ case folder, containing the cases for all participants, and used a dynamic set to get ‘Interview Participants’.\nAnother project structure may have case folders for ‘Interview participants’ and ‘Focus Group participants, and use a dynamic set to get ’All Participants’.\nNote, this would be feasible as long as the interview and focus group participants are two distinct groups. If some participants took part in both interviews and focus groups, then it would not be possible to have separate Cases folders for them, and the project would need to be structured similar to this example.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Summary"
    ]
  },
  {
    "objectID": "going-further/compare-groups.html",
    "href": "going-further/compare-groups.html",
    "title": "Compare Groups",
    "section": "",
    "text": "Our final intial question was making an inital broad comparison between the views of Leave and Remain supporters.\nWe can achieve this with a Matrix Coding Query combining our interview transcript autocoding with are People case classification attribute values.\n\n\nWithin the Query Criteria, right-click in the white space and -\n\n\n\nSelect ‘New Query’\nThen ‘Matrix Coding Query’\n\n\nThis will open a new tab for creating a Matrix Coding Query. We can see some of the familar elements again. In yellow we have the optiosn for searching across all Files & Externals or specific Items and Folders. In blue, we have the default ‘And’ for handling criteria - other options include Or, Not, and Near. What is different though is rather than adding 1+ criteria, we have a box for selecting Rows and another for Columns, in red.\n\n\n\n\n\n\nIt is possible to drag and drop items into the boxes for Rows and Columns, but it is often far quicker and more convenient to use the ‘Select Project Items’ dialogue.\n\n\n\nClick the ‘+’ underneath the Rows box on the left.\nFrom the two options click ‘Select Items…’\n\n\nThen within the Select Project Items dialogue:\n\n\n\nExpand the Codes folder.\nCheck the tickbox for the ‘Autocoded (Sections)’ sub-folder.\nHit ‘OK’.\n\n\n\n\n\nWe can follow the same process to select our columns.\n\n\n\nClick the ‘+’ underneath the Columns box.\nFrom the two options click ‘Select Items…’\n\n\nWhilst ‘Select Attribute Values..’ is an option, that is for selecting individual values with criteria (equals, does not equal) one by one. For our purposes, ‘Select Items…’ remains more convenient.\n\n\n\nSelect the ‘Case Classifications’ folder.\nExpand the ‘People’ case classification.\nExpand the ‘2016 vote’ attribute.\n\n\nAfter scrolling down a bit:\n\n\n\nCheck the box for ‘Leave’ attribute value.\nCheck the box for ‘Remain’ attribute value.\nHit ‘OK’.\n\n\n\n\n\nAfter selecting our Rows and Columns, we can hit ‘Run Query’ (in pink) to create our Coding Matrix. Remember if you want to be able to quickly re-run and update the Coding Matrix to also hit ‘Save Criteria…’ (in green) and give it a suitable name.\nThe Coding Matrix itself (in blue) for each cell in the table shows how many coded sections intersect the two. So, the cell highlight (in yellow) is telling us that 15 sections coded ‘VOTING DECISION’ were also coded to cases, where the participant the case is for supported Leave (both in red).\n\n\n\n\n\n\nThat may not seem all that impressive at first. The real power of Coding Matrices though come from double-clicking any of the cells.\nThat will open a new tab showing all the coded sections being counted in that cell. So, for our example, it opens a tab showing all sections coded ‘VOTING DECISION’ AND also coded to a case where the participant supported Leave.\nThis makes a Coding Matrix the equivalent of a table of shortcuts to more specific queries. Since you can create them with classification attributes, it also makes them ideal for creating queries to aid comparison.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Compare Groups"
    ]
  },
  {
    "objectID": "going-further/compare-groups.html#comparing-leave-and-remain-supporters",
    "href": "going-further/compare-groups.html#comparing-leave-and-remain-supporters",
    "title": "Compare Groups",
    "section": "",
    "text": "Our final intial question was making an inital broad comparison between the views of Leave and Remain supporters.\nWe can achieve this with a Matrix Coding Query combining our interview transcript autocoding with are People case classification attribute values.\n\n\nWithin the Query Criteria, right-click in the white space and -\n\n\n\nSelect ‘New Query’\nThen ‘Matrix Coding Query’\n\n\nThis will open a new tab for creating a Matrix Coding Query. We can see some of the familar elements again. In yellow we have the optiosn for searching across all Files & Externals or specific Items and Folders. In blue, we have the default ‘And’ for handling criteria - other options include Or, Not, and Near. What is different though is rather than adding 1+ criteria, we have a box for selecting Rows and another for Columns, in red.\n\n\n\n\n\n\nIt is possible to drag and drop items into the boxes for Rows and Columns, but it is often far quicker and more convenient to use the ‘Select Project Items’ dialogue.\n\n\n\nClick the ‘+’ underneath the Rows box on the left.\nFrom the two options click ‘Select Items…’\n\n\nThen within the Select Project Items dialogue:\n\n\n\nExpand the Codes folder.\nCheck the tickbox for the ‘Autocoded (Sections)’ sub-folder.\nHit ‘OK’.\n\n\n\n\n\nWe can follow the same process to select our columns.\n\n\n\nClick the ‘+’ underneath the Columns box.\nFrom the two options click ‘Select Items…’\n\n\nWhilst ‘Select Attribute Values..’ is an option, that is for selecting individual values with criteria (equals, does not equal) one by one. For our purposes, ‘Select Items…’ remains more convenient.\n\n\n\nSelect the ‘Case Classifications’ folder.\nExpand the ‘People’ case classification.\nExpand the ‘2016 vote’ attribute.\n\n\nAfter scrolling down a bit:\n\n\n\nCheck the box for ‘Leave’ attribute value.\nCheck the box for ‘Remain’ attribute value.\nHit ‘OK’.\n\n\n\n\n\nAfter selecting our Rows and Columns, we can hit ‘Run Query’ (in pink) to create our Coding Matrix. Remember if you want to be able to quickly re-run and update the Coding Matrix to also hit ‘Save Criteria…’ (in green) and give it a suitable name.\nThe Coding Matrix itself (in blue) for each cell in the table shows how many coded sections intersect the two. So, the cell highlight (in yellow) is telling us that 15 sections coded ‘VOTING DECISION’ were also coded to cases, where the participant the case is for supported Leave (both in red).\n\n\n\n\n\n\nThat may not seem all that impressive at first. The real power of Coding Matrices though come from double-clicking any of the cells.\nThat will open a new tab showing all the coded sections being counted in that cell. So, for our example, it opens a tab showing all sections coded ‘VOTING DECISION’ AND also coded to a case where the participant supported Leave.\nThis makes a Coding Matrix the equivalent of a table of shortcuts to more specific queries. Since you can create them with classification attributes, it also makes them ideal for creating queries to aid comparison.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Compare Groups"
    ]
  },
  {
    "objectID": "going-further/organisation-codes.html",
    "href": "going-further/organisation-codes.html",
    "title": "Adding Organisation Codes",
    "section": "",
    "text": "What are ‘organisation’ codes?\nOrganisation codes are various different codes that are not part of the main ‘thematic’ coding, but that researchers create to to help with organising their coding.\nA few examples:\n\nExample - Use for coding sections that are serve as illustrative example of another code.\nGold - Use for coding sections that have high probability of later being used as a quote. (Though ensure to avoid cherry-picking!)\nImportant - Use for coding sections that are important for the analysis. (This can be distinct in many cases from ‘Gold’.)\nUnsure - Use for coding sections that are coded to another code, but you are unsure whether either it is right code for the section or this coded section is making you question the overall code.\n\n\nIMPORTANT - You do not need all of these! This is merely showing range of examples. Which and how many to have wil change based on personal preferences and analysis aims. For example, when working as part of a large team, ‘example’ can be useful for researchers to identify coded sections they think illustrate specific codes they are developing. This can then help inform discussion to agree a share coding schema for the project.\n\n\nCreating Organisation Codes\n\n\nGo to the main ‘Codes’ folder.\nRight-click on any white space and select ‘New Code…’\n\n\n\n\n\nProvide it with a suitable name, such as ‘Organisation Codes’\nI have added “z - …” at the start as that ensure it’s placed at the end when alphabetically ordered.\n\n\n\n\n\nDrag and drop the existing ‘quotable quote’ code to become a child code of ‘z - Organisation Codes’.\n(Optional) rename it to ‘Gold’.\nCreate another two child codes ‘Unsure’ and ‘Example’.\n\n\n\n\n\nOther Types of Organisation Codes\nAnother way to use codes for organising is having codes to store excerpts you intend to use / have used in specific articles or thesis chapters. This can be combined with queries as well to aid finding most relevant sections. For example, a Matrix Coding Query - which we will cover next - with your writing organisation codes with your main coding schema.\n\nDue to the much more niche use-case for these codes, they are definitely ones to chuck in their own folder to avoid cluttering the top-level folder.",
    "crumbs": [
      "Going Further",
      "**Coding Workflows**",
      "Adding Organisation Codes"
    ]
  },
  {
    "objectID": "going-further/viewing-framework-matrix.html",
    "href": "going-further/viewing-framework-matrix.html",
    "title": "Viewing a Framework Matrix",
    "section": "",
    "text": "When viewing a framework matrix, the matrix itself appears in the middle and, by default, an ‘Associated View’ appears on the right. This view, as the name suggestions, shows content associated with the framework matrix.\nYou can change what precise content is displayed by clicking the ‘Associated View’ button on the Ribbon Bar. (If it is not visible, click inside a framework matrix cell first.)\n\nThere are three options for what content to show:\n\nRow Coding - show all content coded by the case the row is for.\nCell Coding - show all content coded by the row case AND the column code.\nSummary Links - show only content whether a summary link has been made between text in the cell and the associated view.\n\nSimilarly, what gets highlighted in the Associated View can be changed by clicking the ‘Highlight’ button on the Ribbon bar.\n\nThe options here are:\n\nNone - turn off highlighting.\nColumn Coding - highlight everything in the Associated View coded at the code for the currently selected column.\nSummary Links - highlight text in the Associated View that has a summary link with text in the currently selected cell.\nSummary Links from Position - highlight text in the Associated View that has a summary link with text for where the tex cursor is currently within the selected cell.\n\nFinally, a useful option to turn-on before we move to the next page:\n\nAuto Scroll - when on if you click text in the cell that has a summary link, the Associated View will immediately scroll to where the linked text is within the Associated View.\n\n\nBefore clicking to go to the ‘Summary Links’ page, ensure ‘Auto Scroll’ is turned-on.",
    "crumbs": [
      "Going Further",
      "**Framework Matrices**",
      "Viewing a Framework Matrix"
    ]
  },
  {
    "objectID": "going-further/going-further-bk.html",
    "href": "going-further/going-further-bk.html",
    "title": "Welcome!",
    "section": "",
    "text": "Session Brief\n\n\n\nThis one-day in-person workshop is designed for those with a basic working knowledge of NVivo for qualitative research projects. It is designed to introduce you to more advanced features and the flexible ways these can be used for qualitative analysis. It is designed as a follow-on from the “Introduction to Qualitative Analysis Projects in NVivo”, but is open to everyone regardless of whether they attended that session.\nStudents will learn how to use some more advanced features of NVivo:\n\ncoding workflows, tip and tricks\nusing static and dynamic sets\ndifferent types of queries\nframework matrices\n\nWe will use some curated open access qualitative data (the Qualitative Election Study of Britain). However, there is an opportunity to discuss how to use NVivo to manage your own project."
  },
  {
    "objectID": "going-further/going-further-bk.html#session-aims",
    "href": "going-further/going-further-bk.html#session-aims",
    "title": "Welcome!",
    "section": "Session Aims",
    "text": "Session Aims\n\n🧑‍🎓 NVivo 201 - Additive Analysis\nThis workshop covers intermediate-advanced topics in using NVivo for qualitative data analysis. Key to how the more advanced features are introduced is through considering them as flexible tools for ‘additive analysis’. They add to the ‘foundational’ elements of your project – your files, folders, nodes, cases, and notes – providing ways to retrieve, review, and recontextualise data based on the aims of your analysis. They are part of the extended toolset for crafting various ways to organise, navigate, layer, and weave your analysis and data.\nIt is assumed, therefore, that you have pre-requisite knowledge in how to create and set up an NVivo project file, including importing data, auto-coding by speaker / structure, creating nodes and cases, and doing basic coding.\nA Project File though is provided with these already set up, and the follow along demonstrations will give a partial refresher on some of these. We can also use the experiment and discussion sections to do a short review of any of them.\n\n\n🤔 Problem-based approach\nThe sections and tasks for this workshop session are based around problems and considerations to make that you might encounter as your analysis progresses.\nWith each we will cover some conceptual points and a follow along demonstration that combines various NVivo features together to achieve an analysis aim.\nThe purpose of this is to explain features in context, the how and why you would want to use them, rather than just providing an abstract technical explanation of what they do.\nImportantly, after the follow along demonstrations, we will have time for experimentation and discussion. I have tried to identify common enough problems and considerations that will be encountered across different types of project. However, all the steps and features covered can be combined and deployed in a multitude of ways. Please use the ‘experiment and discuss’ sections to raise any questions about how what we are covering could be applied to your project or recombined for other analysis aims.\n\n\n\n\n\n\n‘Living Documents’\n\n\n\nThese pages are ‘living documents’, they will continually and iteratively be updated over time. Please see the Callout on the About page\n\n\n\n\n🧟 Slaying QDAS zombies\nTo say some qualitative researchers were initially resistant to qualitative data analysis software is an understatement. Early literature on the value of computing to qualitative analysis was filled with acerbic critiques, seeing software as undermining the rich in-depth analysis that qualitative analysis offers.\nThere was a partial truth to these criticisms as the nascent software was minimal in features and capabilities. What some critiques got wrong - or, at least, gave the impression of - though, was taking the limitations of the software as it was and treating these as inherent and inescapable.\nThe big four critiques - that software distances researchers from data by placing a barrier between them, strips qualitative methods of its diversity by homogenising coding and analysis, replaces the creativity of qualitative analysis with mechnical steps, and dehumanises participants by decontextualising their experiences - are not unavoidable dangers with modern software.\nHowever, the critiques unfortunately still persist as QDAS Zombies by being recounted again and again in the literature reviews of journal articles and books. That QDAS software is not overly friendly to new users - see below - unfortunately also keeps the zombie critiques going. When users struggle so much with the software that they find themselves turning to paper and pen – or copying chunks of text into Word/Excel files – it’s no wonder these critiques feel more alive than dead.\nWhat we will cover in this workshop should go towards dispelling that feeling by demystifying the features that help solve common problems and analysis aims beyond the basics. I’d go as far as arguing that once you gain a greater understanding and confidence in using contemporary qualitative analysis software, the zombie critiques are a greater risk when using paper and pen.\n\n\n🤢 It’s not you, it’s NVivo!\nNVivo is powerful and without a doubt better than analogue paper and pen analysis – or worse, copying and pasting chunks of text into multiple Word/Excel files – but it remains far from perfect. It is needlessly bloated and clunky, and historically had a reputation for regularly crashing.\nThe unintuitive design and labyrinthine steps required for some tasks – never mind the joys of trying to recall them each time when first starting – gives the false impression that it is all overly-complex. It might not seem it now, but with perseverance the pieces start fitting together, and the initial overwhelm will dissipate into mild frustrations.\nTo Lumivero’s credit, the rate at which NVivo crashes has vastly reduced and is no longer a daily occurrence. However, it can still throw up the occasional unexpected error, freeze and lock-up, or decide to crash and die completely. This is most often ‘NVivo-error’ not ‘user-error’ – there was not anything wrong in how you set up your project or actions you were doing, it’s just NVivo being NVivo."
  },
  {
    "objectID": "going-further/project-file-bk.html",
    "href": "going-further/project-file-bk.html",
    "title": "Project File",
    "section": "",
    "text": "An NVivo project file for this workshop is available to download from the ‘NVivo Training 2024/25’ group on Social."
  },
  {
    "objectID": "going-further/project-file-bk.html#the-data-set",
    "href": "going-further/project-file-bk.html#the-data-set",
    "title": "Project File",
    "section": "The Data Set",
    "text": "The Data Set\nThe NVivo project file uses data from focus groups and interviews conducted in 2015 and 2016 as part of the Qualitative Election Study of Britain.\n\nThe QESB is a collaborative effort between researchers from the UWE Bristol, the University of Dundee, and GESIS in Germany. Since our launch in 2010, our aim has been to learn about the thoughts, feelings, and opinions of every day voters, before and after the UK general election. To this end, we hold focus groups and interviews, online and in-person. During this general election period, we want to hear your thoughts on political life in the UK. Whether it’s about the election, political leaders, parties, economic concerns, the NHS, or climate change, we want to hear it all.\n\nThe data is open access and available from the UK Data Service.\nFor more information on open research and data: - The FAIR principles to improve the findability, accessibility, interoperability, and reuse of digital assets. - UK Data Service hub for archiving qualitative data and secondary analysis. - UK Data Service hub for data skills modules, covering research data management, data for reuse, and more.\nImportant to making data open access is storing it in ‘interoperable’, and ideally ‘open standard’, formats. Interoperable means that the files are not restricted to being opened by a specific single application. An open standard is one that is available for anyone to use, share, or access.\nFull ‘open research’ remains limited within qualitative research for various reasons. Importantly, whilst there is an open QDPX format for sharing qualitative data analysis projects, it is a ‘lossy’ format – where folder structures and more are lost when exporting to the open format.\nIn order then to avoid losing time creating an NVivo project file from scratch / tidying up an imported QDPX file, an NVivo project file has been set up for the workshop and available from Social. This project file is similar to what you would have had at the end of the Intro to NVivo workshop with a few minor tweaks."
  },
  {
    "objectID": "going-further/project-file-bk.html#downloading-the-nvivo-project-file",
    "href": "going-further/project-file-bk.html#downloading-the-nvivo-project-file",
    "title": "Project File",
    "section": "Downloading the NVivo Project File",
    "text": "Downloading the NVivo Project File\nFrom the group page, to access the file:\n\nDownload linkZip file\n\n\n\nClick ‘Feed’ in the group navigation bar.\n\nScroll down the Feed to find my post with the OneDrive link and click it.\n ../ A new tab should open with a button to click to ‘Download’ the file.\n\n\n\n\n\n\nFail-safe\n\n\n\nIn case the download link is not working (my university seems to randomly stop share links from working), there is a zip file containing the NVivo project file on Social as well. Use the next tab for instructions to download and extract the zip file.\n\n\n\n\n\nClick ‘Documents’ in the group navigation bar.\n\nSelect the ‘Going Further (Feb 2025)’ folder.\n\n\nClick the three dots to open the pop-up menu.\nClick ‘Download’ and choose a suitable location to save the file on your device.\n\n\n\nFrom the folder you downloaded it to, right-click on the zip file.\nSelect ‘Extract All…’\n\n\n\nClick ‘Extract’ from the dialogue window and a new folder will be created containing the NVivo project file."
  },
  {
    "objectID": "going-further/project-file-bk.html#convertingupgrading-the-project",
    "href": "going-further/project-file-bk.html#convertingupgrading-the-project",
    "title": "Project File",
    "section": "Converting/Upgrading the Project",
    "text": "Converting/Upgrading the Project\nNVivo project files are ‘forwards’ but not ‘backwards’ compatible. This means that newer versions of NVivo can open project files created in older versions, but not vice versa.\nDue to that, the project file provided was created in NVivo 12, which was the oldest version attendees said they were using in the sign-up survey.\nIf you are using NVivo 12, you can open the file and directly start working in it.\nIf you are using a newer version of NVivo or NVivo for MacOS, you will be greeted by a screen asking you to convert/upgrade the file:\n\nUpgrade\n\n\n\n\n(Optional) click ‘Browse…’ to choose location to save and rename the project file.\nClick ‘Next’.\n\n\n\nFrom the next screen, hit ‘Upgrade’ to confirm and start the upgrade. Once complete NVivo will open the file automatically.\n\n\n\n\n\n\n\n\n\n\nNVivo Version Differences\n\n\n\nOn Windows, there are not any overly significant changes in features from NVivo 12 onwards. The main changes are cosmetic, menu options, and naming conventions.\nNVivo for MacOS has always had a different look and menu options. It now has most of the same main features, though a few sub-features remain absent.\nWe’ll cover some of these differences as we go. The Resources page also has links to the NVivo User Help Pages for different versions."
  },
  {
    "objectID": "going-further/project-file-bk.html#project-file-overview",
    "href": "going-further/project-file-bk.html#project-file-overview",
    "title": "Project File",
    "section": "Project File Overview",
    "text": "Project File Overview\nAs a (very) quick overview of the project file:\n\nFiles\n\nData &gt; Files\n\n\nFocus Groups (2015): Transcripts from three pre-general election focus groups from 2015.\nInterviews (2016): Fourteen telephone interviews on the EU Referendum in 2016.\nLiterature: Containing two articles by QESB team members, one on using grounded theory, the other on using focus groups.\nProject Files: With files that contain additional information about the project, the research phases, and participants who took part.\n\n\n\n\nCodes\n\nCoding &gt; Codes\n\n\nCodes: Top-level folder with some initial coding created during the Intro to NVivo workshop.\n\nAutocoded (Sections): Sub-folder with the broad-brush themes that were created auto-coding the Headings within the interview transcripts.\nAutocoded (Themes): Sub-folder with codes created by auto-coding ‘themes’.\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWe have “autocoded themes” within this document merely to provide a broad range of example codes to work with in the exercises. However, in practice, do not rely on such autocoding instead of creating and coding with your own codes.\n\n\n\n\nCases\n\nCases &gt; Cases\n\n\nInterviewer: Cases created when ‘autocoding by speaker’ that code transcript sections where an interviewer / moderator from the research team is speaking.\nParticipants: Cases created when ‘autocoding by speaker’ that code transcript sections where participants are speaking.\nCase Classifications: Top-level folder contains the case classifications and their attributes. For this project, there is only one case classification - ‘People’.\n\nPeople: Sub-folder with all cases classified as ‘People’, where can see the attributes for specific participants. (Note - the interviewer cases are also classified as people, in many cases you would want to remove from the same classification as participants.)\n\n\n\n\n\nNotes\n\n\n\nMemos: NVivo’s built-in note-taking system. Contains a few existing memos with further project info and reflectives on initial analysis.\nFramework Matrices: Create summaries for cases by node. Currently, empty.\nAnnotations: Annotations added to files, with couple examples.\nSee-Also Links: Use to link content/files to other content/files. Currently, empty.\n\n\n\n\nSets\n\n\n\nStatic Sets: Manually created collections of project items, of any type. Think of this as a way to group and organise items for specific tasks without changing their primary structure. For example, a code can only exist within a single folder within the “Coding &gt; Codes” section. However, it can be included within an unlimited number of static sets.\nDynamic Sets: Collections of project items created based on search criteria. As they are criteria based they also auto-update based on any changes in your project. For example, if you had a dynamic set for all codes used to code focus group transcripts, each time you use a new code when coding the focus groups, it will automatically then be included in the dynamic set.\n\n\n\n\n\n\n\n\nNVivo 12 - ‘search folders’\n\n\n\nDynamic Sets are a new name given to what were called ‘search folders’ in NVivo 12. They operate exactly the same, all that is different is the name.\n\n\n\n\nQueries\n\n\n\nQuery Criteria: Location to store saved queries, saving you from having to manually put them together each time.\nQuery Results: Location to store query results. This can be useful for more complex queries that take a long-time to process to save having to re-run it every time – just remember it won’t reflect any changes to your project file. Query results can also be used to create new nodes and cases.\nCoding Matrices: Similar to the above but for the results of a coding matrix. By default manually created coding matrices saved results with be in Query Results, but they can manually moved across. Coding matrices automatically produced, such as when autocoding by theme, are stored here by default."
  },
  {
    "objectID": "going-further/memo-links.html",
    "href": "going-further/memo-links.html",
    "title": "Memo Links",
    "section": "",
    "text": "Memos in NVivo\nMemos within NVivo as basically rich-text files contained within your project file. They can be used for various purposes, such as storing additional project information, a log of analysis plans and what has been completed so far, and so on. One key use is to use them to store reflections about your coding. Importantly, it is possible to ‘link’ memos to any other object within NVivo, such as transcripts, cases, and codes. This means for each code you can create a link memo for it that can use to make reflexive notes as you code.\n\n\nCreating Memo Links\nCreate a linked memo for one of your chosen thematic codes:\n\n\nRight-click the code.\nSelect ‘Memo Link’.\nThen ‘Link to New Memo…’\n\n\n\n\nProvide an appropriate name. For memos linked to codes I tend to go with “m - Code Name” naming convention.\n\n\n\n\nAdd headers for ‘Example’, ‘Gold’,’ Unsure’.\n\n\n\n\n\nCombining Features\nNow, you can use the coding matrix results we previously created to quickly find and read through content coded to both the code and these three organisation nodes. (Or, for time, add some lorem ipsum.)\nThis shows the power of NVivo that comes from ‘combining features’ into a workflow which may not be obvious and intuitive at first, but once you have a general sense of the features you will start to see various ways they can be combined for different stages and aims of your analysis.",
    "crumbs": [
      "Going Further",
      "**Coding Workflows**",
      "Memo Links"
    ]
  },
  {
    "objectID": "going-further/summary-links.html",
    "href": "going-further/summary-links.html",
    "title": "Summary Links",
    "section": "",
    "text": "What are ‘Summary Links?’\nSummary links are a framework matrix equivalent to memo see-also links. A summary link links text within a framework matrix cell to text within the transcript it is summarises from.\n\n\nCreating a Summary Link\nFortunately, the process for creating a summary link is more straight-forward and easier to remember than creating memo see-also links.\nTo create a summary link:\n\n\nSelect text within a Framework Matrix cell (highlighted in blue).\nSelect text within the Associated View (highlighted in black).\nClick the ‘New Summary Link’ button in the Ribbon bar.\n\n\n\n\n\nNavigating with Summary Links\nNow try:\n\n\nChange the ‘Associated View’ to ‘Cell Coding’.\nFor one of the participants, write some quick summary text in two of the cells and create summary links between the text in the cell and the transcript.\nChange the ‘Associated View’ to ‘Row Coding’.\nWithin the cells click any of the text highlighted red (meaning it has a summary link) and the transcript will auto-scroll to the relevant section.",
    "crumbs": [
      "Going Further",
      "**Framework Matrices**",
      "Summary Links"
    ]
  },
  {
    "objectID": "going-further/reusable-cells.html",
    "href": "going-further/reusable-cells.html",
    "title": "Reusable Cells",
    "section": "",
    "text": "Something not immediately clear when using Framework Matrices is that the cells actually exist independently of any given matrix. Behind the scenes each cells is stored by on its intersection, the case and code combination it relates to. A cell then will appear in all framework matrices which has that case and code.\nAfter adding some text to cells in the ‘ANY OTHER COMMENTS’ and ‘INTRODUCTION’ columns - even if just gibberish:\n\n\nCreate a new Framework Matrix.\nFor rows use the cases in the ‘Remain Interview Participants’ dynamic set.\nFor columns select only the ‘ANY OTHER COMMENTS’ and ’INTRODUCTION’codes.\n\n\nThis makes cells within Framework Matrices ‘composable’, you can make various larger and smaller matrices based on particular analysis aims without risking losing text or accidentally duplicating work.",
    "crumbs": [
      "Going Further",
      "**Framework Matrices**",
      "Reusable Cells"
    ]
  },
  {
    "objectID": "going-further/find-by-case.html",
    "href": "going-further/find-by-case.html",
    "title": "Find By Case",
    "section": "",
    "text": "Within the project file, all our participant cases are in the Cases &gt; Participants folder. This though includes interview and focus group participant cases.\nThis is a perfect scenario for creating a dynamic set.\n\n\n\nNew Dynamic Set\n\n\nIn the left-hand Navigation View, right-click ‘Dynamic Sets’.\nFrom the context menu, click ‘New Dynamic Set…’\n\n\n\n\n\n\n\nProvide an apt ‘Name’ and ‘Description’.\n\n\n\n\n\n\nClick the ‘Search Criteria’ tab, and …\n\n\n\n\n\n\nWithin the Search Criteria view, click the ‘Advanced’ tab!\n\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nIn my opinion, the default, supposedly, ‘Intermediate’ tab is an overwhelming mess. It shows you upfront all the various options that are available, making it difficult to visually parse.\nYou can see it has a series of lines with check boxes of what you want to search for. Consider the ‘Advanced’ tab we are switching to as adding as many of these lines as needed one by one.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Find By Case"
    ]
  },
  {
    "objectID": "going-further/find-by-case.html#interview-participants",
    "href": "going-further/find-by-case.html#interview-participants",
    "title": "Find By Case",
    "section": "",
    "text": "Within the project file, all our participant cases are in the Cases &gt; Participants folder. This though includes interview and focus group participant cases.\nThis is a perfect scenario for creating a dynamic set.\n\n\n\nNew Dynamic Set\n\n\nIn the left-hand Navigation View, right-click ‘Dynamic Sets’.\nFrom the context menu, click ‘New Dynamic Set…’\n\n\n\n\n\n\n\nProvide an apt ‘Name’ and ‘Description’.\n\n\n\n\n\n\nClick the ‘Search Criteria’ tab, and …\n\n\n\n\n\n\nWithin the Search Criteria view, click the ‘Advanced’ tab!\n\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nIn my opinion, the default, supposedly, ‘Intermediate’ tab is an overwhelming mess. It shows you upfront all the various options that are available, making it difficult to visually parse.\nYou can see it has a series of lines with check boxes of what you want to search for. Consider the ‘Advanced’ tab we are switching to as adding as many of these lines as needed one by one.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Find By Case"
    ]
  },
  {
    "objectID": "going-further/find-by-case.html#look-for-interview-participant-cases",
    "href": "going-further/find-by-case.html#look-for-interview-participant-cases",
    "title": "Find By Case",
    "section": "Look for interview participant cases",
    "text": "Look for interview participant cases\nThen for our search criteria, we know two things that distinguishes our interview participants cases:\n\nThe cases code parts of the interview transcripts.\nThe cases are classified within the ‘People’ case classification.\n\n\nLook for\nFirst, let’s set the dynamic set to look for cases.\nWithin the ‘Advanced’ view:\n\n\n\nSelect the drop-down to choose what to ‘Look for’.\nAs we want to find interview participant cases, select ‘Codes & Cases’\n\n\n\n\n1st Criteria\nAs our first criteria, let’s add a criteria to return any ‘codes & cases’ that code any of our interview transcripts.\n\n\n\nWithin the ‘Define more criteria’ section, click the box under ‘Interaction’.\nFrom the drop-down list select ‘Code’.\n\n\n\n\n\nClick the box under ‘Option’.\nFrom the drop-down list select ‘That Codes’.\n\n\n\n\n\nClick the box under ‘Value’.\nFrom the drop-down list select ‘Selected Items’.\n\n\nA ‘Select Project Items’ dialogue will pop open.\n\n\n\nExpand the ‘Files’ folder to see the sub-folders.\nCheck the tick-box for the ‘Interviews (2016)’ sub-folder. This will select all the interview transcripts in the sub-folder.\nHit ‘OK’ to confirm the selection.\n\n\nA wee example of odd minor frustrations NVivo presents. After selecting our interaction, option, value, and files of interest, the ‘Add to List’ option remains greyed out – but, why?\n… there’s a sneaky additional ‘by’ field that can’t be left blank.\n\n\n\nClick the box to the right of ‘by’ (and under the box for ‘Select Items’)\nFrom the drop-down list, select ‘Any User’\n\n\n\n\n\nClick ‘Add to List’.\n\n\nOur 1st criteria now appears in the giant box for ‘Find items that match all these criteria’.\n\n\n\n2nd Criteria\nNext, we now\n\n\n\nClick the box under Interaction.\nSelect ‘Code’ again.\n\n\n\n\n\nClick the box under Option.\nSelect ‘Assigned to Classification’.\n\n\n\n\n\nClick the box under Value.\nSelect ‘Selected Classifications’.\n\n\n\n\n\nWithin the Select Project Items dialogue that pops up, tick the checkbox for ‘People’ case classification.\nHit ‘OK’ to confirm.\n\n\n\n\n\nClick ‘Add to List’.\nHit ‘OK’ to save your dynamic list.\n\n\n\n\nDone\n\nAnd there we have it. Our dynamic set (in red) appears in the Navigation Folder similar to a folder and the items meeting our search criteria (in green) are listed in the Display panel.\n\n\nQuick?\nOK, so maybe that did not feel like a ‘quick’ example. However, that is more to do with the number of steps required, it being something new, and weird quirks in NVivo. Once you gain a sense for how to create criteria for dynamic sets they can be created in a minute or less. Importantly, remember these are dynamically updated, you only need to create each once.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Find By Case"
    ]
  },
  {
    "objectID": "going-further/view-results.html",
    "href": "going-further/view-results.html",
    "title": "View Results",
    "section": "",
    "text": "After hitting ‘Run Query’ you’ll be able to see all coded sections that match our Code Query criteria. Just as when viewing regular Codes, there are three tabs on the right-hand side.\n\nSummary - provides a list of the interview transcript files with details for how many ‘References’ there are - in other words, how many coded sections within this transcript met our criteria - and ‘Coverage’ - what percentage of the total transcript is captured by the coded sections meeting our criteria.\n\nReference - is the default view when viewing Code results. It provides a view with all the coded sections, ordered by file they appear in. At the top, in the blue box, you can see it noting that the coded sections that follow are from the Cathy interview transcript, alongside the total references found and coverage. Then it lists each coded section in turn with info for coverage for that individual coded section, in green box.\n\nText - is similar to the ‘Reference’ view, but is like it’s ‘tab view’ equivalent. Rather than showing all the coded sections in a single view, it adds a row along the top for all the files, where clicking to select any listed file (in blue box) will change the main view below to show only the coded sections from it.\n\n\n\n\nAnd, finally, remember when viewing coded sections, you can right-click on any reference (in blue) and select ‘Open Referenced File’ to open the file the coded section is from.\n\nNVivo will open a new tab for the file, jumping to the specific coded section you had right-click on, and with a Coding Query will also highlight other coded sections from it in the file.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "View Results"
    ]
  },
  {
    "objectID": "going-further/view-results.html#view-results",
    "href": "going-further/view-results.html#view-results",
    "title": "View Results",
    "section": "",
    "text": "After hitting ‘Run Query’ you’ll be able to see all coded sections that match our Code Query criteria. Just as when viewing regular Codes, there are three tabs on the right-hand side.\n\nSummary - provides a list of the interview transcript files with details for how many ‘References’ there are - in other words, how many coded sections within this transcript met our criteria - and ‘Coverage’ - what percentage of the total transcript is captured by the coded sections meeting our criteria.\n\nReference - is the default view when viewing Code results. It provides a view with all the coded sections, ordered by file they appear in. At the top, in the blue box, you can see it noting that the coded sections that follow are from the Cathy interview transcript, alongside the total references found and coverage. Then it lists each coded section in turn with info for coverage for that individual coded section, in green box.\n\nText - is similar to the ‘Reference’ view, but is like it’s ‘tab view’ equivalent. Rather than showing all the coded sections in a single view, it adds a row along the top for all the files, where clicking to select any listed file (in blue box) will change the main view below to show only the coded sections from it.\n\n\n\n\nAnd, finally, remember when viewing coded sections, you can right-click on any reference (in blue) and select ‘Open Referenced File’ to open the file the coded section is from.\n\nNVivo will open a new tab for the file, jumping to the specific coded section you had right-click on, and with a Coding Query will also highlight other coded sections from it in the file.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "View Results"
    ]
  },
  {
    "objectID": "going-further/project-file.html",
    "href": "going-further/project-file.html",
    "title": "Project File",
    "section": "",
    "text": "An NVivo project file for this workshop is available to download from the ‘NVivo Training 2024/25’ group on Social."
  },
  {
    "objectID": "going-further/project-file.html#the-data-set",
    "href": "going-further/project-file.html#the-data-set",
    "title": "Project File",
    "section": "The Data Set",
    "text": "The Data Set\nThe NVivo project file uses data from focus groups and interviews conducted in 2015 and 2016 as part of the Qualitative Election Study of Britain.\n\nThe QESB is a collaborative effort between researchers from the UWE Bristol, the University of Dundee, and GESIS in Germany. Since our launch in 2010, our aim has been to learn about the thoughts, feelings, and opinions of every day voters, before and after the UK general election. To this end, we hold focus groups and interviews, online and in-person. During this general election period, we want to hear your thoughts on political life in the UK. Whether it’s about the election, political leaders, parties, economic concerns, the NHS, or climate change, we want to hear it all.\n\nThe data is open access and available from the UK Data Service.\nFor more information on open research and data: - The FAIR principles to improve the findability, accessibility, interoperability, and reuse of digital assets. - UK Data Service hub for archiving qualitative data and secondary analysis. - UK Data Service hub for data skills modules, covering research data management, data for reuse, and more.\nImportant to making data open access is storing it in ‘interoperable’, and ideally ‘open standard’, formats. Interoperable means that the files are not restricted to being opened by a specific single application. An open standard is one that is available for anyone to use, share, or access.\nFull ‘open research’ remains limited within qualitative research for various reasons. Importantly, whilst there is an open QDPX format for sharing qualitative data analysis projects, it is a ‘lossy’ format – where folder structures and more are lost when exporting to the open format.\nIn order then to avoid losing time creating an NVivo project file from scratch / tidying up an imported QDPX file, an NVivo project file has been set up for the workshop and available from Social. This project file is similar to what you would have had at the end of the Intro to NVivo workshop with a few minor tweaks."
  },
  {
    "objectID": "going-further/project-file.html#downloading-the-nvivo-project-file",
    "href": "going-further/project-file.html#downloading-the-nvivo-project-file",
    "title": "Project File",
    "section": "Downloading the NVivo Project File",
    "text": "Downloading the NVivo Project File\nFrom the group page, to access the file:\n\nDownload linkZip file\n\n\n\nClick ‘Feed’ in the group navigation bar.\n\nScroll down the Feed to find my post with the OneDrive link and click it.\n ../ A new tab should open with a button to click to ‘Download’ the file.\n\n\n\n\n\n\nFail-safe\n\n\n\nIn case the download link is not working (my university seems to randomly stop share links from working), there is a zip file containing the NVivo project file on Social as well. Use the next tab for instructions to download and extract the zip file.\n\n\n\n\n\nClick ‘Documents’ in the group navigation bar.\n\nSelect the ‘Going Further (Feb 2025)’ folder.\n\n\nClick the three dots to open the pop-up menu.\nClick ‘Download’ and choose a suitable location to save the file on your device.\n\n\n\nFrom the folder you downloaded it to, right-click on the zip file.\nSelect ‘Extract All…’\n\n\n\nClick ‘Extract’ from the dialogue window and a new folder will be created containing the NVivo project file."
  },
  {
    "objectID": "going-further/project-file.html#convertingupgrading-the-project",
    "href": "going-further/project-file.html#convertingupgrading-the-project",
    "title": "Project File",
    "section": "Converting/Upgrading the Project",
    "text": "Converting/Upgrading the Project\nNVivo project files are ‘forwards’ but not ‘backwards’ compatible. This means that newer versions of NVivo can open project files created in older versions, but not vice versa.\nDue to that, the project file provided was created in NVivo 12, which was the oldest version attendees said they were using in the sign-up survey.\nIf you are using NVivo 12, you can open the file and directly start working in it.\nIf you are using a newer version of NVivo or NVivo for MacOS, you will be greeted by a screen asking you to convert/upgrade the file:\n\nUpgrade\n\n\n\n\n(Optional) click ‘Browse…’ to choose location to save and rename the project file.\nClick ‘Next’.\n\n\n\nFrom the next screen, hit ‘Upgrade’ to confirm and start the upgrade. Once complete NVivo will open the file automatically.\n\n\n\n\n\n\n\n\n\n\nNVivo Version Differences\n\n\n\nOn Windows, there are not any overly significant changes in features from NVivo 12 onwards. The main changes are cosmetic, menu options, and naming conventions.\nNVivo for MacOS has always had a different look and menu options. It now has most of the same main features, though a few sub-features remain absent.\nWe’ll cover some of these differences as we go. The Resources page also has links to the NVivo User Help Pages for different versions."
  },
  {
    "objectID": "Downloading the data.html",
    "href": "Downloading the data.html",
    "title": "Downloading the data",
    "section": "",
    "text": "You have all been added to a group on SGSSS Social where the data files are stored.\n\nTo access the files:\n\nLog into SGSSS Social\nGo to Groups &gt; My Groups\nGo to ‘NVivo Training 2024/25’\n\nYou can also access the group directly here (you may be prompted to log in).\n\n\nGo to ‘Documents’, then scroll down to folder ‘2. Data and Project files’\n\n\n\nDownload the whole folder and save it somewhere sensible e.g your documents folder. You might need to unzip it if it came zipped/compressed.\nCheck the content. You should have 4 folders:\n\n\n2015 FGDs: 3 transcripts\n2016 interviews: 14 transcripts,\nLiterature: 3 articles\nResearch tools: 7 documents\n\n1 interview questions\n1 list of interview question codes\n1 interview schedule\n3 FGD info sheets\n1 excel of metadata",
    "crumbs": [
      "Project Setup",
      "**The Dataset**",
      "Downloading the data"
    ]
  },
  {
    "objectID": "Downloading the data.html#the-sgsss-social-site",
    "href": "Downloading the data.html#the-sgsss-social-site",
    "title": "Downloading the data",
    "section": "",
    "text": "You have all been added to a group on SGSSS Social where the data files are stored.\n\nTo access the files:\n\nLog into SGSSS Social\nGo to Groups &gt; My Groups\nGo to ‘NVivo Training 2024/25’\n\nYou can also access the group directly here (you may be prompted to log in).\n\n\nGo to ‘Documents’, then scroll down to folder ‘2. Data and Project files’\n\n\n\nDownload the whole folder and save it somewhere sensible e.g your documents folder. You might need to unzip it if it came zipped/compressed.\nCheck the content. You should have 4 folders:\n\n\n2015 FGDs: 3 transcripts\n2016 interviews: 14 transcripts,\nLiterature: 3 articles\nResearch tools: 7 documents\n\n1 interview questions\n1 list of interview question codes\n1 interview schedule\n3 FGD info sheets\n1 excel of metadata",
    "crumbs": [
      "Project Setup",
      "**The Dataset**",
      "Downloading the data"
    ]
  },
  {
    "objectID": "going-further.html",
    "href": "going-further.html",
    "title": "Going Further",
    "section": "",
    "text": "Section Overview\n\n\n\nThis section covers intermediate-advanced topics in using NVivo for qualitative data analysis.\nKey to how the more advanced features will be covered is through considering them as flexible tools for ‘additive analysis’. They add to the ‘foundational’ elements of your project – your files, folders, nodes, cases, and notes – providing ways to retrieve, review, and recontextualise data based on the aims of your analysis. They are part of the extended toolset for crafting various ways to organise, navigate, layer, and weave your analysis and data.\nIt is assumed, therefore, that you have followed the steps in the first two sections, including importing data, auto-coding by speaker / structure, creating nodes and cases, and doing basic coding.\nA project file though is provided on Social with these already setup.",
    "crumbs": [
      "Going Further"
    ]
  },
  {
    "objectID": "New codes.html",
    "href": "New codes.html",
    "title": "Creating new codes",
    "section": "",
    "text": "As you progress with coding, some headings may not correspond to our initial question guide.\nThis is common- these may be questions that were added in later or discussion that came up unexpectedly in the conversation.\nAn example of this in the Dundee transcript is the question header ‘Subsequent Political Change’ :\n\n\nMethod 1 : coding bar\n\n\nHighlight the text\nAt the coding bar at the bottom of the screen, check you are coding to ‘Codes’ (1)\nIn the section, ‘Code to:’, type ‘Subsequent political change’ then press enter (2)\nClick the Open Circle to create the code and code highlighted text (3)\nYou will know this has worked if you see a green pop-up confirming its been coded (4)\n\n\n\n\n\nYou can also check out the new code and what it contains by double-clicking it:\n\n\n\n\n\nNB. You can use this coding bar to code to existing codes as well. Once you start typing in the bar, NVivo will offer you existing codes to select:\n\n\n\n\n\nMethod 2: right click\n\n\nWhile highlighting the text, right click and choose ‘code selection’:\n\n\n\n\n\nIn the pop up box, create a new code:\n\n\n\n\n\nMethod 3: drag and drop\n\n\nWhile highlighting the text, drag and drop it into the open space below the codes to open a prompt to create a new code:\n\n\n\n\n\nin the pop up box, name the code and click OK\n\n\n\n\n\nTop tips\nWhen creating a new code, think of your future self and any collaborators.\n\nWhen naming codes, use clear, direct, short codes\n\nAlways include a description of what you think this code means and what should be included here.",
    "crumbs": [
      "Start Coding",
      "**Coding in NVivo**",
      "Creating new codes"
    ]
  },
  {
    "objectID": "project-setup.html",
    "href": "project-setup.html",
    "title": "NVivo Project Setup",
    "section": "",
    "text": "Section Overview\n\n\n\nThis section will walk you through the steps of creating a new project.\nWe will cover:\n\nhow to import and organise files,\nhow to create cases and case classifications.\nHow to connect metadata (e.g. demographic information about interviewees)\n\nFollow the steps by clicking through the arrows at the bottom right.\n\n\nWhich NVivo version are we using?\nThis project setup guide uses screenshots from NVivo Windows 14 and 15. Things may look a little different if you’re working on other versions. Differences with windows R1, 14 and 15 are minimal (where they exist, we’ll try to mention it).\nSee our cheatsheet for a quick guide to how things differ across versions.\nFor more complex tasks, we recommend you consult manuals which are relevant to the version you are working in, which can be found in the Resources tab above.",
    "crumbs": [
      "Project Setup",
      "NVivo Project Setup"
    ]
  },
  {
    "objectID": "nvivo-about.html",
    "href": "nvivo-about.html",
    "title": "How can NVivo help me?",
    "section": "",
    "text": "Nvivo is a software package for managing qualitative and mixed methods analysis projects.\nYou can start an Nvivo project at any point in the research lifecycle: at the design phase, when you have already collected data, or even later.\nAs an analysis tool, Nvivo can help you:\nBut aside from helping to structure your analysis, Nvivo can be really helpful as a project management tool, organising your data and other useful information in one place.\nYou can also use Nvivo to collaborate - you can share projects or using cloud functionality to invite others in.",
    "crumbs": [
      "Intro",
      "How can NVivo help me?"
    ]
  },
  {
    "objectID": "nvivo-about.html#and-what-cant-it-do",
    "href": "nvivo-about.html#and-what-cant-it-do",
    "title": "How can NVivo help me?",
    "section": "And what can’t it do?",
    "text": "And what can’t it do?\nImportant to note, using Nvivo will NOT:\n\nmake your analysis better\nmake meaning- you as the researcher do that\nautomatically provide objectivity and clarity, or ensure reproducibility\n\nEven though it allows linkage of qualitative and quantitative data, it can’t perform quantitative analysis.\nNvivo takes time to set up; and to make the most of the software, it requires some patience.\nIt is also more useful for some analysis approaches than others: for example very good for thematic content analysis (which we will cover today), but not so well adapted for others like interpretative phenomenological analysis (IPA).",
    "crumbs": [
      "Intro",
      "How can NVivo help me?"
    ]
  },
  {
    "objectID": "nvivo-about.html#navigating-online-resources",
    "href": "nvivo-about.html#navigating-online-resources",
    "title": "How can NVivo help me?",
    "section": "Navigating online resources",
    "text": "Navigating online resources\nThere are a plethora of online resources for Nvivo (of varying quality…). This can be overwhelming!\nAfter you’ve done this workshop, you should feel more confident at searching and using these.\nWhere possible, we will sign post you to more advanced online tutorials.",
    "crumbs": [
      "Intro",
      "How can NVivo help me?"
    ]
  },
  {
    "objectID": "quickexample.html",
    "href": "quickexample.html",
    "title": "Layering Structure",
    "section": "",
    "text": "🤔 Critical Considerations\n\n\n\nWithin NVivo guidance and training you’ll often see emphasis being placed on considering your project structure, such as:\n\nUse of folders to organise data, nodes, cases, and memos.\nWhich case classifications to create.\nAuto-coding by speaker, style, and/or structure.\n\nWhen first starting with NVivo, it may not always be clear why such importance is placed on these considerations.\nLet’s say you have the following series of questions during your analysis:\n\nHow do I find the cases for all the interview participants?\nHow do I find the cases for interview participants who supported Remain?\nHow do I find what views interview participants who supported Remain had on the Leave campaign?\nHow can I do an initial broad comparison of the views of Remain and Leave campaign supports?"
  },
  {
    "objectID": "quickexample.html#project-structure",
    "href": "quickexample.html#project-structure",
    "title": "Layering Structure",
    "section": "",
    "text": "🤔 Critical Considerations\n\n\n\nWithin NVivo guidance and training you’ll often see emphasis being placed on considering your project structure, such as:\n\nUse of folders to organise data, nodes, cases, and memos.\nWhich case classifications to create.\nAuto-coding by speaker, style, and/or structure.\n\nWhen first starting with NVivo, it may not always be clear why such importance is placed on these considerations.\nLet’s say you have the following series of questions during your analysis:\n\nHow do I find the cases for all the interview participants?\nHow do I find the cases for interview participants who supported Remain?\nHow do I find what views interview participants who supported Remain had on the Leave campaign?\nHow can I do an initial broad comparison of the views of Remain and Leave campaign supports?"
  },
  {
    "objectID": "quickexample.html#interview-participants",
    "href": "quickexample.html#interview-participants",
    "title": "Layering Structure",
    "section": "Interview Participants",
    "text": "Interview Participants\nWithin the project file, all our participant cases are in the Cases &gt; Participants folder. This though includes interview and focus group participant cases.\nThis is a perfect scenario for creating a dynamic set.\n\nBasics of creating a dynamic set\n\nNew Dynamic Set\n\n\nIn the left-hand Navigation View, right-click ‘Dynamic Sets’.\nFrom the context menu, click ‘New Dynamic Set…’\n\n\n\n\nGeneral Details\n\n\nProvide an apt ‘Name’ and ‘Description’.\n\n\n\nSearch Criteria Tab\n\n\nClick the ‘Search Criteria’ tab, and …\n\n\n\nAdvanced Tab\n\n\nWithin the Search Criteria view, click the ‘Advanced’ tab!\n\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nIn my opinion, the default, supposedly, ‘Intermediate’ tab is an overwhelming mess. It shows you upfront all the various options that are available, making it difficult to visually parse.\nYou can see it has a series of lines with check boxes of what you want to search for. Consider the ‘Advanced’ tab we are switching to as adding as many of these lines as needed one by one."
  },
  {
    "objectID": "quickexample.html#look-for-interview-participant-cases",
    "href": "quickexample.html#look-for-interview-participant-cases",
    "title": "Layering Structure",
    "section": "Look for interview participant cases",
    "text": "Look for interview participant cases\nThen for our search criteria, we know two things that distinguishes our interview participants cases:\n\nThe cases code parts of the interview transcripts.\nThe cases are classified within the ‘People’ case classification.\n\n\nLook for\nFirst, let’s set the dynamic set to look for cases.\nWithin the ‘Advanced’ view:\n\n\n\nSelect the drop-down to choose what to ‘Look for’.\nAs we want to find interview participant cases, select ‘Codes & Cases’\n\n\n\n\n1st Criteria\nAs our first criteria, let’s add a criteria to return any ‘codes & cases’ that code any of our interview transcripts.\n\n\n\nWithin the ‘Define more criteria’ section, click the box under ‘Interaction’.\nFrom the drop-down list select ‘Code’.\n\n\n\n\n\nClick the box under ‘Option’.\nFrom the drop-down list select ‘That Codes’.\n\n\n\n\n\nClick the box under ‘Value’.\nFrom the drop-down list select ‘Selected Items’.\n\n\nA ‘Select Project Items’ dialogue will pop open.\n\n\n\nExpand the ‘Files’ folder to see the sub-folders.\nCheck the tick-box for the ‘Interviews (2016)’ sub-folder. This will select all the interview transcripts in the sub-folder.\nHit ‘OK’ to confirm the selection.\n\n\nA wee example of odd minor frustrations NVivo presents. After selecting our interaction, option, value, and files of interest, the ‘Add to List’ option remains greyed out – but, why?\n… there’s a sneaky additional ‘by’ field that can’t be left blank.\n\n\n\nClick the box to the right of ‘by’ (and under the box for ‘Select Items’)\nFrom the drop-down list, select ‘Any User’\n\n\n\n\n\nClick ‘Add to List’.\n\n\nOur 1st criteria now appears in the giant box for ‘Find items that match all these criteria’.\n\n\n\n2nd Criteria\nNext, we now\n\n\n\nClick the box under Interaction.\nSelect ‘Code’ again.\n\n\n\n\n\nClick the box under Option.\nSelect ‘Assigned to Classification’.\n\n\n\n\n\nClick the box under Value.\nSelect ‘Selected Classifications’.\n\n\n\n\n\nWithin the Select Project Items dialogue that pops up, tick the checkbox for ‘People’ case classification.\nHit ‘OK’ to confirm.\n\n\n\n\n\nClick ‘Add to List’.\nHit ‘OK’ to save your dynamic list.\n\n\n\n\nDone\n\nAnd there we have it. Our dynamic set (in red) appears in the Navigation Folder similar to a folder and the items meeting our search criteria (in green) are listed in the Display panel.\n\n\nQuick?\nOK, so maybe that did not feel like a ‘quick’ example. However, that is more to do with the number of steps required, it being something new, and weird quirks in NVivo. Once you gain a sense for how to create criteria for dynamic sets they can be created in a minute or less. Importantly, remember these are dynamically updated, you only need to create each once."
  },
  {
    "objectID": "quickexample.html#remain-interview-participants",
    "href": "quickexample.html#remain-interview-participants",
    "title": "Layering Structure",
    "section": "Remain Interview Participants",
    "text": "Remain Interview Participants\nSo, our next question was finding all our interview participants who support Remain the EU Referendum. As it is similar steps to follow, a shortened version of the instructions are included below.\n\nNew Dynamic Set\n\n\nCreate a new dynamic set (right-click on ‘Dynamic Sets’ and select ‘New Dynamic Set…’) and provide it relevant Name and Description.\n\nThen in ‘Search Criteria’ tab and ‘Advanced’ sub-tab:\n\n\n\nLook for: ‘Codes % Cases’\nInteraction: “Code”\nOption: “That Codes”\nValue: “Select Items” & tick the checkbox next to ‘Interviews (2016)’ in the pop up dialogue.\nBy: “Any User”\nHit “Add to List”\n\n\n\n\n2nd Criteria\n\n\nThis time for the 2nd criteria, select ‘Attribute’ for the interaction.\n\nWithin the Select Project Item dialogue that opens:\n\n\n\nExpand the People case classification.\nSelect ‘2016 vote’ (the attribute to Remain/Leave in the EU Referendum)\nHit ‘OK’\n\n\nAll that’s left to do:\n\n\n\nChange the ‘Value’ we are selecting for to ‘Remain’.\nClick ‘Add to List’.\nHit ‘OK’ to create the Dynamic Set.\n\n\nAnd again our Dynamic Set is shown in red and the results in green.\n\nAs you can see, once you start getting a sense for how to create search criteria, it becomes relatively quick for creating them – most of the time spent is figuring out how to do it in the first place."
  },
  {
    "objectID": "quickexample.html#remain-interview-participants-views-on-the-leave-campaign",
    "href": "quickexample.html#remain-interview-participants-views-on-the-leave-campaign",
    "title": "Layering Structure",
    "section": "Remain Interview Participants Views on the Leave Campaign",
    "text": "Remain Interview Participants Views on the Leave Campaign\nAnother benefit to Dynamic Sets is they can be used when creating other objects, such as Queries. This helps us then towards our third question - what were our interview participants who supported Remain say about the Leave Campaign.\nHere we can combine our “Remain Interview Participants” Dynamic Set and the “LEAVE CAMPAIGN” code.\n(If you missed the Intro workshop, this code and others were created by auto-coding the interview transcripts. This was possible as the transcripts have Headings for each of the main topics covered in the interviews.)\n\nCreate Coding Query\n\n\nFirst, click ‘Query Criteria’ in the left Navigation View.\n\n\n\nWithin the Details list you may see a message explaining what Query criteria are, if so hit ‘Close’.\n\n\n\nRight-click anywhere within the white space of the Details list, and:\n\nSelect ‘New Query’\n‘Coding’\n\n\n\n\nThis will open a new tab for creating a Coding Query. Similar to when creating Dynamic Sets in the Advanced view, we have ‘Search in’ options to limit our query to specific files, items, or folders (in blue). We also have rows for our search criteria (in green).\n\n\n\nCoding Query Criteria\nWe what are our two main criteria?\n\nInterview participants who supported Remain.\nTranscript sections where they speak about the Leave Campaign.\n\nTo begin then:\n\n\n\nChange ‘All Selected Codes or Cases’ to ‘Any Selected Code or Case’. (We want to find any text in the transcripts coded to any of our remain participants case)\nClick the ‘…’ to open a ‘Select Project Items’ dialogue to select our cases.\n\n\n\nWithin the ‘Select Project Items’:\n\n\nTick the checkbox for the ‘Remain Interview Participants’ dynamic set.\nHit ‘OK’\n\n\nAnd that is it – our first criteria done!\nBy default a new Coding Query is set to return ‘All’ (in light blue) coded sections that meet the listed criteria. So, all we need to do now is add another criteria for our ‘LEAVE CAMPAIGN’ code.\n\n\n\nClick the ‘+’ at the end of our first criteria to add another criteria below.\nChange the middle box again to ‘Any Selected Code or Case’\nClick the ‘…’ once more for a ‘Select Project Items’ dialogue.\n\n\n\n\n2nd Criteria\nWithin the ‘Select Project Items’ dialogue:\n\n\n\nExpand the ‘Codes’ folder.\nSelect the ‘Autocoded (Sections)’ subfolder.\nCheck the tickbox for the ‘LEAVE CAMPAIGN’ node.\nHit ‘OK’ to confirm.\n\n\nNow you can hit Run Query (in pink) to check the query results match what we were expecting and Save Criteria… (in blue) so we can quickly access it again in future. As it is a fairly simple query and fast to run, there is no need to save a separate copy of the results."
  },
  {
    "objectID": "quickexample.html#view-results",
    "href": "quickexample.html#view-results",
    "title": "Layering Structure",
    "section": "View Results",
    "text": "View Results\n\nNode Views\n\nAfter hitting ‘Run Query’ you’ll be able to see all coded sections that match our Code Query criteria. Just as when viewing regular Codes, there are three tabs on the right-hand side.\n\nSummary - provides a list of the interview transcript files with details for how many ‘References’ there are - in other words, how many coded sections within this transcript met our criteria - and ‘Coverage’ - what percentage of the total transcript is captured by the coded sections meeting our criteria.\n\nReference - is the default view when viewing Code results. It provides a view with all the coded sections, ordered by file they appear in. At the top, in the blue box, you can see it noting that the coded sections that follow are from the Cathy interview transcript, alongside the total references found and coverage. Then it lists each coded section in turn with info for coverage for that individual coded section, in green box.\n\nText - is similar to the ‘Reference’ view, but is like it’s ‘tab view’ equivalent. Rather than showing all the coded sections in a single view, it adds a row along the top for all the files, where clicking to select any listed file (in blue box) will change the main view below to show only the coded sections from it.\n\n\nOpen Referenced File\n\nAnd, finally, remember when viewing coded sections, you can right-click on any reference (in blue) and select ‘Open Referenced File’ to open the file the coded section is from.\n\nNVivo will open a new tab for the file, jumping to the specific coded section you had right-click on, and with a Coding Query will also highlight other coded sections from it in the file."
  },
  {
    "objectID": "quickexample.html#comparing-leave-and-remain-supporters",
    "href": "quickexample.html#comparing-leave-and-remain-supporters",
    "title": "Layering Structure",
    "section": "Comparing Leave and Remain Supporters",
    "text": "Comparing Leave and Remain Supporters\nOur final intial question was making an inital broad comparison between the views of Leave and Remain supporters.\nWe can achieve this with a Matrix Coding Query combining our interview transcript autocoding with are People case classification attribute values.\n\nMatrix Coding Query\nWithin the Query Criteria, right-click in the white space and -\n\n\n\nSelect ‘New Query’\nThen ‘Matrix Coding Query’\n\n\nThis will open a new tab for creating a Matrix Coding Query. We can see some of the familar elements again. In yellow we have the optiosn for searching across all Files & Externals or specific Items and Folders. In blue, we have the default ‘And’ for handling criteria - other options include Or, Not, and Near. What is different though is rather than adding 1+ criteria, we have a box for selecting Rows and another for Columns, in red.\n\n\n\n\n\nAdding Rows\nIt is possible to drag and drop items into the boxes for Rows and Columns, but it is often far quicker and more convenient to use the ‘Select Project Items’ dialogue.\n\n\n\nClick the ‘+’ underneath the Rows box on the left.\nFrom the two options click ‘Select Items…’\n\n\nThen within the Select Project Items dialogue:\n\n\n\nExpand the Codes folder.\nCheck the tickbox for the ‘Autocoded (Sections)’ sub-folder.\nHit ‘OK’.\n\n\n\n\nAdding Columns\nWe can follow the same process to select our columns.\n\n\n\nClick the ‘+’ underneath the Columns box.\nFrom the two options click ‘Select Items…’\n\n\nWhilst ‘Select Attribute Values..’ is an option, that is for selecting individual values with criteria (equals, does not equal) one by one. For our purposes, ‘Select Items…’ remains more convenient.\n\n\n\nSelect the ‘Case Classifications’ folder.\nExpand the ‘People’ case classification.\nExpand the ‘2016 vote’ attribute.\n\n\nAfter scrolling down a bit:\n\n\n\nCheck the box for ‘Leave’ attribute value.\nCheck the box for ‘Remain’ attribute value.\nHit ‘OK’.\n\n\n\n\nViewing Results\nAfter selecting our Rows and Columns, we can hit ‘Run Query’ (in pink) to create our Coding Matrix. Remember if you want to be able to quickly re-run and update the Coding Matrix to also hit ‘Save Criteria…’ (in green) and give it a suitable name.\nThe Coding Matrix itself (in blue) for each cell in the table shows how many coded sections intersect the two. So, the cell highlight (in yellow) is telling us that 15 sections coded ‘VOTING DECISION’ were also coded to cases, where the participant the case is for supported Leave (both in red).\n\n\n\n\n\nViewing Cell Coding\nThat may not seem all that impressive at first. The real power of Coding Matrices though come from double-clicking any of the cells.\nThat will open a new tab showing all the coded sections being counted in that cell. So, for our example, it opens a tab showing all sections coded ‘VOTING DECISION’ AND also coded to a case where the participant supported Leave.\nThis makes a Coding Matrix the equivalent of a table of shortcuts to more specific queries. Since you can create them with classification attributes, it also makes them ideal for creating queries to aid comparison."
  },
  {
    "objectID": "quickexample.html#summary",
    "href": "quickexample.html#summary",
    "title": "Layering Structure",
    "section": "Summary",
    "text": "Summary\nThese examples show different ways you can iteratively build upon your project structure as your analysis progresses.\n\nYour initial structure (folders, codes, cases) can be used to create dynamic sets or query for specific coded sections.\nIt is possible to add layers upon layers. A dynamic set can be used as part of a query - saving you having to repeat the specific criteria for it again and again.\n\nIt can be useful then, in addition to considering your ‘foundational’ structure to think about which dynamic sets can add a supporting additional layer to make other tasks easier in the long-term.\nIt can feel slow and clunky at first getting to grips with creating them, but as you create more your pace will quicken, and through combining them with queries start to more intuitively combine NVivo features in relation to questions that arise during analysis.\n\n\n\n\n\n\n\nDon’t panic!\n\n\n\nIt is not a problem if you have already started your analysis and not added some of the ways to structure a project file covered in this session.\n\nMost - such as auto-coding and creating folders - can be created at any stage.\nNot every project and analysis needs to use all of these structuring options. Some options also add equivalent structure in different ways, where there is some ‘aesthetic choice’ in which to use.\nIf your transcripts do not make use of headers to structure the main topics covered, you can still do manual ‘broad-brush’ coding. (If having this topic-level coding would benefit your analysis!)\n\nImportantly, for some project structure decisions there is no 100% right/wrong way to do it.\nIn the example covered we had a ‘Participants’ case folder, containing the cases for all participants, and used a dynamic set to get ‘Interview Participants’.\nAnother project structure may have case folders for ‘Interview participants’ and ‘Focus Group participants, and use a dynamic set to get ’All Participants’.\nNote, this would be feasible as long as the interview and focus group participants are two distinct groups. If some participants took part in both interviews and focus groups, then it would not be possible to have separate Cases folders for them, and the project would need to be structured similar to this example."
  },
  {
    "objectID": "Deductive coding.html",
    "href": "Deductive coding.html",
    "title": "Question coding: manual approach",
    "section": "",
    "text": "Question codes\nAnother form of basic deductive coding is to code using the interview questions. It might be useful to know how everyone answered the same question across different transcripts.\n\n\nView the interview questions and their suggested codes by going into the ‘Research tools’ folder (1) and opening up ‘2016 Interview Questions’ (2):\n\n\n\nHere you can see that each section of the interview has a question and suggested short-form code.\n\n\nThe manual approach\n\n\nKeeping this file open in our Detail View, click on ‘codes’ in the Navigation View.\nCreate a new code by right-clicking in the List View section (currently empty)\nClick ‘new code’\n\n\n\n\n\nIn the pop up box, create codes from the terms in the right-hand column, one at a time. E.g. first make a code called ‘Intro’, then another one called ‘Referendum campaign’ and so on.\nFor the ’description section, it is helpful to copy/paste the full question from the quetsion codes document.\nFor this example, select ‘aggregate coding from children’ when creating codes. This means that sub-codes under this code will be included when expanding this code and returned in queries using the parent code. This can be changed at any time.\n\n\n\n\nRepeat the steps for all the question codes until your list view looks like this:\n\n\nNotice that, as we haven’t begun coding, both files and references will show as 0. Once we begin coding, the number under files will tell how many distinct files contain this code. References will tell the number of total times this code has been used (codes may be used several times in the same file).\n\n\nCode text manually to question headers\n\n\nOpen the first transcript in the folder 2016 interviews, ‘carter’.\nUsing Ctrl +F, find the question header ‘Voting decision’.\n\n\n\n\n\nHighlight the text response within this section and drag and drop it into the code listed on the left.\n\n\n\n\n\nAnother way to do this is to highlight to box and use the coding bar at the bottom ofo the screen.\n\n\n\n\n\nWhen you’ve done this you will see there is one reference coded to ‘Voting decision’; you can click on it to view the text in question.\n\n\n\n\n\nSome headings in the actual transcripts may not exactly correspond to the question codes, for example, ‘Referendum Campaign 2’ . You could choose to make another coding category for this, but as they represent the same topic, we decided to code them all together into ‘Referendum campaign’.",
    "crumbs": [
      "Start Coding",
      "**Coding in NVivo**",
      "Question coding: manual approach"
    ]
  },
  {
    "objectID": "New project.html",
    "href": "New project.html",
    "title": "Create a new project file",
    "section": "",
    "text": "To create a new NVivo project file:\n\n\nOpen NVivo and click the ‘New Project’ tile on the welcome page. (If you already have an NVivo project open, click ‘File’ on top-left of the ribbon and select ‘New’.\n\n\n\nGive your project a suitable title.\nThe file name will be automatically generated.\nYou can enter a description of the project at this stage as well. While not required, it’s good practice to include something here.\nYou can choose a language here - English (US) is the default.\nClick Next.\n\n\n\n\n\nThen, choose your preferred save and recovery settings:\n\n\n\nNB: The default setting is to have autosave disabled with save prompts every 15 minutes. If you turn on autosave, undo functions are disabled.\n\n\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nIt’s VERY IMPORTANT to save regularly as NVivo has a notorious habit of crashing. Whilst the autosave reminders can be annoying they are a minor annoyance compared to spending a day working on your analysis without saving for NVivo to unexpectedly crash!",
    "crumbs": [
      "Project Setup",
      "**Set up a new project**",
      "Create a new project file"
    ]
  },
  {
    "objectID": "New project.html#steps",
    "href": "New project.html#steps",
    "title": "Create a new project file",
    "section": "",
    "text": "To create a new NVivo project file:\n\n\nOpen NVivo and click the ‘New Project’ tile on the welcome page. (If you already have an NVivo project open, click ‘File’ on top-left of the ribbon and select ‘New’.\n\n\n\nGive your project a suitable title.\nThe file name will be automatically generated.\nYou can enter a description of the project at this stage as well. While not required, it’s good practice to include something here.\nYou can choose a language here - English (US) is the default.\nClick Next.\n\n\n\n\n\nThen, choose your preferred save and recovery settings:\n\n\n\nNB: The default setting is to have autosave disabled with save prompts every 15 minutes. If you turn on autosave, undo functions are disabled.\n\n\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nIt’s VERY IMPORTANT to save regularly as NVivo has a notorious habit of crashing. Whilst the autosave reminders can be annoying they are a minor annoyance compared to spending a day working on your analysis without saving for NVivo to unexpectedly crash!",
    "crumbs": [
      "Project Setup",
      "**Set up a new project**",
      "Create a new project file"
    ]
  },
  {
    "objectID": "New project.html#optional-tour",
    "href": "New project.html#optional-tour",
    "title": "Create a new project file",
    "section": "Optional tour",
    "text": "Optional tour\n\nYou will be prompted to take a quick tour, which will outline:\n\nImporting data\nCases\nNotes\nQueries\nVisualizations\nCentralizing workflow\n\nSkip for now – but may be worth coming back to in the future.",
    "crumbs": [
      "Project Setup",
      "**Set up a new project**",
      "Create a new project file"
    ]
  },
  {
    "objectID": "Material to cases.html",
    "href": "Material to cases.html",
    "title": "Coding material to cases",
    "section": "",
    "text": "In this example project, we are most interested in people who have both a 2016 interview and took part in the 2015 pre-election FGDs.\nNow that we have established our cases, we will link the responses of the 14 people interviewed in 2016 with their data from the 2015 pre-election focus group.\nSo, we will link the interview transcript of Walt:\n\nwith Walt’s data from the focus group he took part in:\n\nTo do this, we need to go into each focus group transcript, search for responses from Walt, and manually code this to Walt’s case.\n\n\n\n\nOpen the 2015 Dundee pre-election focus group in your Detail View, and have Cases, People in your List View.\nIn the focus group data, use Ctrl+F (find) to search for responses from Walt.\nHighlight the text and drag it across to Walt’s case in the list view. NB. It may be useful to highlight the preceding moderator’s question/prompt that Walt is responding to.\n\n\n\n\n\nYou can double click on Walt’s case to check it’s been coded correctly.\n\n\n\nThen you would cycle through manually for all instances of Walt’s response in the focus group transcript, then repeat for other participants.",
    "crumbs": [
      "Start Coding",
      "**Coding in NVivo**",
      "Coding material to cases"
    ]
  },
  {
    "objectID": "Material to cases.html#autocoding-using-a-properly-formatted-transcript",
    "href": "Material to cases.html#autocoding-using-a-properly-formatted-transcript",
    "title": "Coding material to cases",
    "section": "Autocoding using a properly formatted transcript",
    "text": "Autocoding using a properly formatted transcript\nLet’s start the process again using the Birmingham FGD.\nNotice that in the Birmingham transcript, every time a person speaks it is followed by a colon:\n\n\n\nOpen the Birmingham 2015 pre-election focus group discussion files and select ‘autocode’ from the ribbon.\nIn the autocode wizard, this time enter speaker names with a colon (e.g. Charles:) and click next.\nSelect Next.\n\n\n\n\n\nAs we already have cases set up for the people we are interested in, select ‘add to existing classifications’, ‘people’ and select ‘finish’.\n\n\n\n\nCheck results by clicking into ‘People’:\n\n\nIf you click on a case e.g. ‘charles’ you can see there are now 2 files and 38 references linked to that person (1).\nIn the detail view on the right, you can see all quotes coded to Charles’ case. (2 and 3)\nFinally, you can see a summary of the % of the transcript which is coded to Charles by clicking on the ‘summary’ tab on the far right (4).\n\n\n\nThe moral of the story: autocoding can save you a lot of time in deductive category coding if you understand the algorithm and format data correctly.",
    "crumbs": [
      "Start Coding",
      "**Coding in NVivo**",
      "Coding material to cases"
    ]
  },
  {
    "objectID": "Uncoding.html",
    "href": "Uncoding.html",
    "title": "Uncoding",
    "section": "",
    "text": "Uncode when necessary\nIf you’ve coded something incorrectly, you can uncode text in as many ways as you can code.\nAfter highlighting the text, you can either:\n\n\nRight-click and choose uncode.\n\n\n\n\n\nSelect ‘uncode’ in the document ribbon at the top:\n\n\n\n\n\nUse the bottom coding bar button / keyboard shortcut (CTRL+SHIFT+F9);",
    "crumbs": [
      "Start Coding",
      "**Coding in NVivo**",
      "Uncoding"
    ]
  },
  {
    "objectID": "going-further/layering-structure.html",
    "href": "going-further/layering-structure.html",
    "title": "Layering Structure",
    "section": "",
    "text": "🤔 Critical Considerations\n\n\n\nWithin NVivo guidance and training you’ll often see emphasis being placed on considering your project structure, such as:\n\nUse of folders to organise data, nodes, cases, and memos.\nWhich case classifications to create.\nAuto-coding by speaker, style, and/or structure.\n\nWhen first starting with NVivo, it may not always be clear why such importance is placed on these considerations.\nLet’s say you have the following series of questions during your analysis:\n\nHow do I find the cases for all the interview participants?\nHow do I find the cases for interview participants who supported Remain?\nHow do I find what views interview participants who supported Remain had on the Leave campaign?\nHow can I do an initial broad comparison of the views of Remain and Leave campaign supports?",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Layering Structure"
    ]
  },
  {
    "objectID": "going-further/layering-structure.html#project-structure",
    "href": "going-further/layering-structure.html#project-structure",
    "title": "Layering Structure",
    "section": "",
    "text": "🤔 Critical Considerations\n\n\n\nWithin NVivo guidance and training you’ll often see emphasis being placed on considering your project structure, such as:\n\nUse of folders to organise data, nodes, cases, and memos.\nWhich case classifications to create.\nAuto-coding by speaker, style, and/or structure.\n\nWhen first starting with NVivo, it may not always be clear why such importance is placed on these considerations.\nLet’s say you have the following series of questions during your analysis:\n\nHow do I find the cases for all the interview participants?\nHow do I find the cases for interview participants who supported Remain?\nHow do I find what views interview participants who supported Remain had on the Leave campaign?\nHow can I do an initial broad comparison of the views of Remain and Leave campaign supports?",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Layering Structure"
    ]
  },
  {
    "objectID": "going-further/develop-coding.html",
    "href": "going-further/develop-coding.html",
    "title": "Developing your initial coding",
    "section": "",
    "text": "🤔 Critical Considerations\n\n\n\nAt the end of the Start Coding section we covered two key ways in which to develop your coding:\n\nCreating a code hierarchy, so have broader ‘parent’ codes containing more specific ‘child’ codes.\nUncoding sections that you had previously coded, whether to undo mistakes or as part of the process of refining what text is coded at each code.\n\nAs you continue coding you may start to consider whether more substantial changes are needed.\nFirstly, don’t panic - this is a perfectly normal aspect of the coding process. It is rare to end coding with all the codes exactly the same as they were after only coding a couple of transcripts. Instead, codes may be renamed, merged together, recoded to new codes, and so on.\nSecondly, whilst it may not be initially obvious, NVivo does provide tools to help manage developing your coding. As examples, we will cover:\n\nUsing ‘organisation codes’ as an additional layer of reflexive coding.\nCreating a ‘code matrix query’ to view text coded to both thematic and organisation codes.\nLinking memos to codes and using memo ‘see also links’ as means of jotting down reflections as you code.\nAuto-coding memos to find all relevant sections from your memos.\nOrganising codes with ‘static sets’ to aid in recoding.",
    "crumbs": [
      "Going Further",
      "**Coding Workflows**",
      "Developing your initial coding"
    ]
  },
  {
    "objectID": "going-further/re-casing.html",
    "href": "going-further/re-casing.html",
    "title": "Re-Casing",
    "section": "",
    "text": "One limitation with Framework Matrices is that Rows must be cases and Columns codes. However, this is another situation where dynamic sets and queries can come to the rescue.\nFirst:\n\n\nCreate a new Coding Query\nFor criteria, ‘Coded to’, ‘Any Selected Code or Case’, in the ‘Remain Interview Participants’ dynamic set.\n‘Save Criteria…’ as Sections Coded at Remain Interview Participants.\nClick wee triangle next to ‘Run Query’ and select ‘Run and Save Results’\nIn the Store Query Results dialogue on the Location row, click ‘Select…’\nSelect the ‘Cases’ folder as the location and hit ‘OK’\nGive it a suitable name, such as “Remain Supporters”\nHit ‘OK’.\n\n\nThen:\n\n\nCreate a new dynamic folder ‘Leave Interview Participants’ with criteria ‘Code’, ‘That Codes’, any items in the ‘Interviews (2016)’ folder.\nCreate (and save) a new Coding Query, ‘Coded to’, ‘Any Selected Code or Case’, in the ‘Leave Interview Participants’ dynamic set.\n‘Run and Save Results’ to a new case in the ‘Cases’ folder, “Leave Supporters”\n\n\nFinally:\n\n\nCreate a new Framework Matrix\nRows = “Remain Supporters” and “Leave Supporters”\nColumns = “Autocoded (Sections)”\n\n\nAnother example:\n\n\nCreate a new Framework Matrix\nRows, first add all individual cases from the ‘Remain Interview Participants’ dynamic set.\nRows, second add the ‘Remain Supporters’ case.\nColumns = “Autocoded (Sections)”\n\n\nThis then provides a Framework Matrix with a row for each Remain supporting participant, and a row for summarising across all Remain supporters.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Re-Casing"
    ]
  },
  {
    "objectID": "going-further/memo-see-also.html",
    "href": "going-further/memo-see-also.html",
    "title": "Memo See Also Links",
    "section": "",
    "text": "What Are ‘See Also Links’?\n‘See Also Links’ are a means to add a link between text across two different objects, such as text in a memo and text in a transcript. This makes it possible to write reflections on your coding and link directly to any text within the transcript you are directly speaking about.\n\n\nCreating a See Also Link\nTo link text within a memo to text in a transcript:\n\n\nSelect the text you want to link to the memo text.\nRight-click and select ‘Copy’.\n\n\n\nThen, back in the memo:\n\n\nSelect the memo text you want to be linked.\nRight-click and select ‘Paste as See-Also Link’.\n\n\n\n\n\nViewing See Also Links\nSee also links appear in red highlighting and, similar to Annotations, a panel listing all See-Also Links within the current tab can be displayed at the bottom of the page.\n\nImportantly, if you right-click red highlighted text or any of the items listed in the See-Also Links panel, you can ‘Open To Item’. This will open a new tab for the file that contains the linked text, and will auto-scroll to the exact section the linked text appears.",
    "crumbs": [
      "Going Further",
      "**Coding Workflows**",
      "Memo See Also Links"
    ]
  },
  {
    "objectID": "going-further/project-overview.html",
    "href": "going-further/project-overview.html",
    "title": "Project File Overview",
    "section": "",
    "text": "As a (very) quick overview and reminder of the main workspace areas within NVivo and how we have the project file for this afternoon setup:\n\nFiles\n\nData &gt; Files\n\n\nFocus Groups (2015): Transcripts from three pre-general election focus groups from 2015.\nInterviews (2016): Fourteen telephone interviews on the EU Referendum in 2016.\nLiterature: Containing two articles by QESB team members, one on using grounded theory, the other on using focus groups.\nProject Files: With files that contain additional information about the project, the research phases, and participants who took part.\n\n\n\n\nCodes\n\nCoding &gt; Codes\n\n\nCodes: Top-level folder with some initial coding created during the Intro to NVivo workshop.\n\nAutocoded (Sections): Sub-folder with the broad-brush themes that were created auto-coding the Headings within the interview transcripts.\nAutocoded (Themes): Sub-folder with codes created by auto-coding ‘themes’.\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWe have “autocoded themes” within this document merely to provide a broad range of example codes to work with in the exercises. However, in practice, do not rely on such autocoding instead of creating and coding with your own codes.\n\n\n\n\nCases\n\nCases &gt; Cases\n\n\nInterviewer: Cases created when ‘autocoding by speaker’ that code transcript sections where an interviewer / moderator from the research team is speaking.\nParticipants: Cases created when ‘autocoding by speaker’ that code transcript sections where participants are speaking.\nCase Classifications: Top-level folder contains the case classifications and their attributes. For this project, there is only one case classification - ‘People’.\n\nPeople: Sub-folder with all cases classified as ‘People’, where can see the attributes for specific participants. (Note - the interviewer cases are also classified as people, in many cases you would want to remove from the same classification as participants.)\n\n\n\n\n\nNotes\n\n\n\nMemos: NVivo’s built-in note-taking system. Contains a few existing memos with further project info and reflectives on initial analysis.\nFramework Matrices: Create summaries for cases by node. Currently, empty.\nAnnotations: Annotations added to files, with couple examples.\nSee-Also Links: Use to link content/files to other content/files. Currently, empty.\n\n\n\n\nSets\n\n\n\nStatic Sets: Manually created collections of project items, of any type. Think of this as a way to group and organise items for specific tasks without changing their primary structure. For example, a code can only exist within a single folder within the “Coding &gt; Codes” section. However, it can be included within an unlimited number of static sets.\nDynamic Sets: Collections of project items created based on search criteria. As they are criteria based they also auto-update based on any changes in your project. For example, if you had a dynamic set for all codes used to code focus group transcripts, each time you use a new code when coding the focus groups, it will automatically then be included in the dynamic set.\n\n\n\n\n\n\n\n\nNVivo 12 - ‘search folders’\n\n\n\nDynamic Sets are a new name given to what were called ‘search folders’ in NVivo 12. They operate exactly the same, all that is different is the name.\n\n\n\n\nQueries\n\n\n\nQuery Criteria: Location to store saved queries, saving you from having to manually put them together each time.\nQuery Results: Location to store query results. This can be useful for more complex queries that take a long-time to process to save having to re-run it every time – just remember it won’t reflect any changes to your project file. Query results can also be used to create new nodes and cases.\nCoding Matrices: Similar to the above but for the results of a coding matrix. By default manually created coding matrices saved results with be in Query Results, but they can manually moved across. Coding matrices automatically produced, such as when autocoding by theme, are stored here by default.",
    "crumbs": [
      "Going Further",
      "Project File Overview"
    ]
  },
  {
    "objectID": "going-further/combine-set-and-query.html",
    "href": "going-further/combine-set-and-query.html",
    "title": "Combine Sets and Queries",
    "section": "",
    "text": "Another benefit to Dynamic Sets is they can be used when creating other objects, such as Queries. This helps us then towards our third question - what were our interview participants who supported Remain say about the Leave Campaign.\nHere we can combine our “Remain Interview Participants” Dynamic Set and the “LEAVE CAMPAIGN” code.\n(If you missed the Intro workshop, this code and others were created by auto-coding the interview transcripts. This was possible as the transcripts have Headings for each of the main topics covered in the interviews.)\n\n\n\n\nFirst, click ‘Query Criteria’ in the left Navigation View.\n\n\n\nWithin the Details list you may see a message explaining what Query criteria are, if so hit ‘Close’.\n\n\n\nRight-click anywhere within the white space of the Details list, and:\n\nSelect ‘New Query’\n‘Coding’\n\n\n\n\nThis will open a new tab for creating a Coding Query. Similar to when creating Dynamic Sets in the Advanced view, we have ‘Search in’ options to limit our query to specific files, items, or folders (in blue). We also have rows for our search criteria (in green).\n\n\n\n\nWe what are our two main criteria?\n\nInterview participants who supported Remain.\nTranscript sections where they speak about the Leave Campaign.\n\nTo begin then:\n\n\n\nChange ‘All Selected Codes or Cases’ to ‘Any Selected Code or Case’. (We want to find any text in the transcripts coded to any of our remain participants case)\nClick the ‘…’ to open a ‘Select Project Items’ dialogue to select our cases.\n\n\n\nWithin the ‘Select Project Items’:\n\n\nTick the checkbox for the ‘Remain Interview Participants’ dynamic set.\nHit ‘OK’\n\n\nAnd that is it – our first criteria done!\nBy default a new Coding Query is set to return ‘All’ (in light blue) coded sections that meet the listed criteria. So, all we need to do now is add another criteria for our ‘LEAVE CAMPAIGN’ code.\n\n\n\nClick the ‘+’ at the end of our first criteria to add another criteria below.\nChange the middle box again to ‘Any Selected Code or Case’\nClick the ‘…’ once more for a ‘Select Project Items’ dialogue.\n\n\n\n\n\nWithin the ‘Select Project Items’ dialogue:\n\n\n\nExpand the ‘Codes’ folder.\nSelect the ‘Autocoded (Sections)’ subfolder.\nCheck the tickbox for the ‘LEAVE CAMPAIGN’ node.\nHit ‘OK’ to confirm.\n\n\nNow you can hit Run Query (in pink) to check the query results match what we were expecting and Save Criteria… (in blue) so we can quickly access it again in future. As it is a fairly simple query and fast to run, there is no need to save a separate copy of the results.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Combine Sets and Queries"
    ]
  },
  {
    "objectID": "going-further/combine-set-and-query.html#remain-interview-participants-views-on-the-leave-campaign",
    "href": "going-further/combine-set-and-query.html#remain-interview-participants-views-on-the-leave-campaign",
    "title": "Combine Sets and Queries",
    "section": "",
    "text": "Another benefit to Dynamic Sets is they can be used when creating other objects, such as Queries. This helps us then towards our third question - what were our interview participants who supported Remain say about the Leave Campaign.\nHere we can combine our “Remain Interview Participants” Dynamic Set and the “LEAVE CAMPAIGN” code.\n(If you missed the Intro workshop, this code and others were created by auto-coding the interview transcripts. This was possible as the transcripts have Headings for each of the main topics covered in the interviews.)\n\n\n\n\nFirst, click ‘Query Criteria’ in the left Navigation View.\n\n\n\nWithin the Details list you may see a message explaining what Query criteria are, if so hit ‘Close’.\n\n\n\nRight-click anywhere within the white space of the Details list, and:\n\nSelect ‘New Query’\n‘Coding’\n\n\n\n\nThis will open a new tab for creating a Coding Query. Similar to when creating Dynamic Sets in the Advanced view, we have ‘Search in’ options to limit our query to specific files, items, or folders (in blue). We also have rows for our search criteria (in green).\n\n\n\n\nWe what are our two main criteria?\n\nInterview participants who supported Remain.\nTranscript sections where they speak about the Leave Campaign.\n\nTo begin then:\n\n\n\nChange ‘All Selected Codes or Cases’ to ‘Any Selected Code or Case’. (We want to find any text in the transcripts coded to any of our remain participants case)\nClick the ‘…’ to open a ‘Select Project Items’ dialogue to select our cases.\n\n\n\nWithin the ‘Select Project Items’:\n\n\nTick the checkbox for the ‘Remain Interview Participants’ dynamic set.\nHit ‘OK’\n\n\nAnd that is it – our first criteria done!\nBy default a new Coding Query is set to return ‘All’ (in light blue) coded sections that meet the listed criteria. So, all we need to do now is add another criteria for our ‘LEAVE CAMPAIGN’ code.\n\n\n\nClick the ‘+’ at the end of our first criteria to add another criteria below.\nChange the middle box again to ‘Any Selected Code or Case’\nClick the ‘…’ once more for a ‘Select Project Items’ dialogue.\n\n\n\n\n\nWithin the ‘Select Project Items’ dialogue:\n\n\n\nExpand the ‘Codes’ folder.\nSelect the ‘Autocoded (Sections)’ subfolder.\nCheck the tickbox for the ‘LEAVE CAMPAIGN’ node.\nHit ‘OK’ to confirm.\n\n\nNow you can hit Run Query (in pink) to check the query results match what we were expecting and Save Criteria… (in blue) so we can quickly access it again in future. As it is a fairly simple query and fast to run, there is no need to save a separate copy of the results.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Combine Sets and Queries"
    ]
  },
  {
    "objectID": "going-further/find-by-attribute.html",
    "href": "going-further/find-by-attribute.html",
    "title": "Find by Attribute",
    "section": "",
    "text": "So, our next question was finding all our interview participants who support Remain the EU Referendum. As it is similar steps to follow, a shortened version of the instructions are included below.\n\n\n\n\nCreate a new dynamic set (right-click on ‘Dynamic Sets’ and select ‘New Dynamic Set…’) and provide it relevant Name and Description.\n\nThen in ‘Search Criteria’ tab and ‘Advanced’ sub-tab:\n\n\n\nLook for: ‘Codes % Cases’\nInteraction: “Code”\nOption: “That Codes”\nValue: “Select Items” & tick the checkbox next to ‘Interviews (2016)’ in the pop up dialogue.\nBy: “Any User”\nHit “Add to List”\n\n\n\n\n\n\n\nThis time for the 2nd criteria, select ‘Attribute’ for the interaction.\n\nWithin the Select Project Item dialogue that opens:\n\n\n\nExpand the People case classification.\nSelect ‘2016 vote’ (the attribute to Remain/Leave in the EU Referendum)\nHit ‘OK’\n\n\nAll that’s left to do:\n\n\n\nChange the ‘Value’ we are selecting for to ‘Remain’.\nClick ‘Add to List’.\nHit ‘OK’ to create the Dynamic Set.\n\n\nAnd again our Dynamic Set is shown in red and the results in green.\n\nAs you can see, once you start getting a sense for how to create search criteria, it becomes relatively quick for creating them – most of the time spent is figuring out how to do it in the first place.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Find by Attribute"
    ]
  },
  {
    "objectID": "going-further/find-by-attribute.html#remain-interview-participants",
    "href": "going-further/find-by-attribute.html#remain-interview-participants",
    "title": "Find by Attribute",
    "section": "",
    "text": "So, our next question was finding all our interview participants who support Remain the EU Referendum. As it is similar steps to follow, a shortened version of the instructions are included below.\n\n\n\n\nCreate a new dynamic set (right-click on ‘Dynamic Sets’ and select ‘New Dynamic Set…’) and provide it relevant Name and Description.\n\nThen in ‘Search Criteria’ tab and ‘Advanced’ sub-tab:\n\n\n\nLook for: ‘Codes % Cases’\nInteraction: “Code”\nOption: “That Codes”\nValue: “Select Items” & tick the checkbox next to ‘Interviews (2016)’ in the pop up dialogue.\nBy: “Any User”\nHit “Add to List”\n\n\n\n\n\n\n\nThis time for the 2nd criteria, select ‘Attribute’ for the interaction.\n\nWithin the Select Project Item dialogue that opens:\n\n\n\nExpand the People case classification.\nSelect ‘2016 vote’ (the attribute to Remain/Leave in the EU Referendum)\nHit ‘OK’\n\n\nAll that’s left to do:\n\n\n\nChange the ‘Value’ we are selecting for to ‘Remain’.\nClick ‘Add to List’.\nHit ‘OK’ to create the Dynamic Set.\n\n\nAnd again our Dynamic Set is shown in red and the results in green.\n\nAs you can see, once you start getting a sense for how to create search criteria, it becomes relatively quick for creating them – most of the time spent is figuring out how to do it in the first place.",
    "crumbs": [
      "Going Further",
      "**Dynamic Sets and Queries**",
      "Find by Attribute"
    ]
  },
  {
    "objectID": "going-further/synthesis-interpretation-themes.html",
    "href": "going-further/synthesis-interpretation-themes.html",
    "title": "Synthesis, Intrepretation, and Themes",
    "section": "",
    "text": "🤔 Critical Considerations\n\n\n\nWithin qualitative analysis you’ll often hear terms like ‘synthesis’, ‘interpretation’, and ‘themes’. At times this can vague and unhelpful, such as the over-used phrase claiming ‘themes emerge’ through analysis, without specifying precisely how.\nWe have though already covered some of the ways through which your analysis develops beyond the simple coding of text:\n\nOrganising your coding within a code hierarchy, identifying broader parent codes and more specific child codes.\nMemos for exploring initial reflections and interpretation.\nStatic sets and queries for exploring and refining your coding as your analysis develops.\n\nAnother useful feature for building synthesis, interpetation, and themes is framework matrices. Originally, in pen and paper days, framework matrices were often seen as an alternative to thematic coding, where instead of going through transcripts coding text, a matrix is created with rows for each participant and columns for the themes / codes. Information is then summarised for each participant for the columns, aiding in identifcation of patterns.\nWithin NVivo this is no longer an ‘either/or’ and ‘both’ is a valid option. Importantly, NVivo makes it possible to create a workflow for moving from coding to framework matrices.",
    "crumbs": [
      "Going Further",
      "**Framework Matrices**",
      "Synthesis, Intrepretation, and Themes"
    ]
  },
  {
    "objectID": "going-further/using-static-sets.html",
    "href": "going-further/using-static-sets.html",
    "title": "Using Static Sets",
    "section": "",
    "text": "What are Static Sets?\nStatic Sets provide a means for collating and organising objects - whether transcripts, cases, codes, queries, etc - from across your project file. In contrast to the main workspace views within NVivo (Files, Coding, …), where for example a code can only exist in a single specific folder within the Coding section, a code can be added to an unlimited number of static sets. This makes them ideal for making collections of codes for specific purposes outwith your main coding hierarchy.\nFor example, say you wanted to recode text coded at three existing codes to three new codes you have created.\n\n\nLet’s Create a Static Set\nFirst, create a new static set:\n\n\nNavigate to Sets &gt; Static Sets\nRight-click in any available white space.\nLeft-click to select ‘New Static Set…’\n\n\n\nThen within the ‘New Static Set’ dialogue:\n\n\nProvide a suitable ‘Name’, for this exercise go with ‘Old Codes’\nHit ‘OK’ to confirm\n\n\n\nNext, let’s add some of our existing coding to the set. Navigate to ‘Autocoded (Themes)’ and:\n\n\nSelect three existing codes (preferable ones with higher number of coded sections)\nDrag and drop them onto the ‘Old Codes’ Static Set we created.\n\n\nNow, let’s create another set and our new nodes:\n\n\nRepeat the instructions for creating a new static set and name it ‘New Codes’.\nWithin your Coding &gt; Codes top-level folder create three new codes of your choice, for simplicity I’m just going with ‘A’, ‘B’, ‘C’.\nAdd these three codes to the ‘New Codes’ static set.\n\n\n\n\nCoded to Old Codes, but not New Codes\nOur familiar friend ‘Matrix Coding Query’ can now be combined with these sets to help us with the recoding process. We can create a matrix coding query that has row for our ‘Old Codes’ static set and column for our ‘New Codes’ static set, showing a cell with all text that is not yet coded to our new codes.\nSo, let’s create a new matrix coding query:\n\n\nNavigate to Queries &gt; Query Criteria\nRight-click on ‘Query Criteria’ or any available white space and select ‘New Query’.\nClick on ‘Matrix Coding Query’\n\n\n\nThen within the Matrix Coding Query:\n\n\nHit the ‘+’ button.\nClick ‘Select Items…’\n\n\n\nThen, within the ‘Select Project Items’ dialogue:\n\n\nSelect ‘Static Sets’\nTick the box for ‘Old Codes’\nHit ‘OK’.\n\n\n\nRepeat steps for the Columns and our New Codes set:\n\n\nHit the ‘+’ button.\nClick ‘Select Items…’\n\n\n\nThen:\n\n\nSelect ‘Static Sets’.\nTick the box for ‘New Codes’.\nHit the ‘OK’ button.\n\n\n\nWe want this matrix to aid us in recoding text from our ‘old’ to ‘new’ codes, so in comparison to the last time we created one where wanted to find text coded at both the row and column, this time we want to find text coded at our ‘old’ codes, but not our ‘new’ codes. So:\n\n\nFor the ‘Coding at rows … columns’ drop-down, change it to ‘Not’\n\n\n\nRemember to also:\n\n\nClick ‘Save Criteria…’\nGive the query a name such as ‘From Old to New’.\n\n\n\n\nThe Query Results\nWhilst this will create a single cell, double-clicking will open a coding results tab with all sections coded at the codes in the ‘Old Codes’ static set.\nYou can now work your way recoding to the New Codes. Importantly, during recoding you can hit ‘Run Query’ and get an update of how many sections are left to recode. This can be extremely useful if whilst recoding you realise you actually need a fourth new code ‘D’. You can create it, add it to ‘New Codes’ static set and ‘Run Query’ for your ‘Recoding Old with New’ Matrix Code Query.\nRemember you can change the ‘coding content’ to view more text surrounding the sections coded to your old codes. That won’t make a difference for most of the codes in this project file, but if you only coded sentences or even short phrases, this will add back some additional context.\n\nSimilarly, you can turn on coding stripes and highlighting using the static set as a filter.\n\n\n\n\nOther uses for static sets\nStatic Sets can save a lot of headaches and frustration when adopting a coding approach that has multiple stages in developing and refining your codes or working on a large project with multiple researchers coding across different policy areas where you have a lot of codes across multiple folders that you may want retrieve quickly.\nSimilarly, they can also be used for:\n\nGrouping conceptual related codes outside your main coding schema.\nCollating a mix of items (files, cases, codes) that are pertinent to an aspect of your analysis.\nMaking a group of participants with similar experiences, but where it would not necessarily make sense to capture it using Attributes.",
    "crumbs": [
      "Going Further",
      "**Coding Workflows**",
      "Using Static Sets"
    ]
  },
  {
    "objectID": "going-further/memo-autocode.html",
    "href": "going-further/memo-autocode.html",
    "title": "Autocode Memos",
    "section": "",
    "text": "As another example of how flexible some of NVivos features are, as with files, it is possible to autocode memos - in exactly same way as autocoded the transcripts.\n\n\nRight-click the memo you created.\nSelect ‘Autocode…’\n\n\n\nWithin the Autocode Wizard dialogue:\n\n\nSelect ‘Use the style or structure’\nClick ‘Hit’\n\n\n\nFor Step 2:\n:: instructions\nSelect ‘Paragraph’ styles and hit ‘Next’\n\n:::\nFor Step 3:\n\n\nSelect ‘Heading 1’\nClick the ‘&gt;&gt;’ button to add it to ‘Selected paragraph styles’\nHit ‘Next’\n\n\n\nFinally, for Step 4:\n\n\nChange ‘Under’ to ‘New Folder’\nProvide it an appropriate Name, such as ‘Autocoding (Memo Sections)’\nHit ‘Finish’\n\n\n\nThen, to view the autocoding:\n\n\nNavigate to ‘Autocoding (Memo Sections)’ (or whatever name you provided)\n\n\n\nThis may not seem like much with just a single or couple memos, but if you had a series of structure memos this would let you quickly find and navigate them by specific sections. Going through the ‘Unsure’ sections, for example, may help you identify new code to create or ones to replace.\nSay you decided to create three new codes to outright replace three old ones, but this is made tricky as the each code does replace one code, but instead cuts across content in 2-3 of the old codes.\nThis is where static sets come in handy…",
    "crumbs": [
      "Going Further",
      "**Coding Workflows**",
      "Autocode Memos"
    ]
  },
  {
    "objectID": "going-further/code-matrix-query.html",
    "href": "going-further/code-matrix-query.html",
    "title": "Coding Matrix Query",
    "section": "",
    "text": "What is a Coding Matrix Query?\nA Coding Matrix Query finds all text that is meets conditions between two codes - such as text coded at Code A and Code B or text coded at Code X but not Code Y. You provide a list of codes to use for the rows, and another for the columns, alongside speciftying whether to use and/or/not condition between the two.\n\n\nCreating a Coding Matrix Query\nFirst, ensure to have done some initial coding to the organisation codes:\n\n\nSelect two or three existing codes from the top-level Codes folder or ‘Autocoded (Theme)’ sub-folder.\nOpen tabs for to view the code results for each.\nQuickly go through coding sections from the code results to ‘Example’, ‘Gold’, and ‘Unsure’.\n\n\nThen, to create a coding matrix:\n\n\nGo to the Query Criteria folder\nRight-click and select New Query\nand, Matrix Coding Query\n\n\n\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nDespite there being a Queries &gt; Coding Matrices section, we do not use that for creating a new Matrix Coding Query. That section is where you can find the saved results from a Matrix Query. And the eagle eyed may have the following questions:\n\nThere is a ‘Query Results’ section, so why also have a seperate ‘Coding Matrices’ section?\nYou create a ‘Matrix Coding Query’, but its results are referred to as a ‘Coding Matrix’?\n\nThe answer to both is ‘Yes, but no idea why - that’s just NVivo being NVivo’.\n\n\nThen within the Matrix Coding Query:\n\n\nHit the ‘+’ button.\nClick ‘Select Items…’\n\n\n\nWithin the ‘Select Project Items’ dialogue, select the three codes you picked:\n\n\nNavigate to the folder containing them.\nCheck the boxes for them.\nHit the ‘OK’ button.\n\n\n\nRepeat steps for the Columns with our organisation codes:\n\n\nHit the ‘+’ button.\nClick ‘Select Items…’\n\n\n\nThen:\n\n\nSelect Codes.\nExpand the parent z - org code. (or name you chose for it)\nTick the boxes for the three organisation codes.\nHit the ‘OK’ button.\n\n\n\nFinally:\n\n\nHit ‘Run Query’\n\n\n\nRemember to also -\n\n\nHit ‘Save Criteria…’\nProvide a suitable name.\n\n\n\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nWith some queries NVivo will ask you for a name upfront before letting you add criteria, with others you can modify criteria before saving - just always ensure if its a query you plan to reuse again in future to ‘Save Criteria…’ before closing the tab for it.\n\n\nThis will then produce a coding matrix you can then use to find sections coded at both a regular and organisation code.\nIt may not look that useful at first, is it not just a bunch of cells with numbers?\nEach number is a count of how many sections of text are coded for the relevant row and column codes for the cell.\nFar more important though is double-clicking on any of the cells! That will open a Code Results view for all the text for that cell. So, if you click on the cell where row = campaign and column = Gold, it will open a results view showing all text coded at both campaign and Gold - in other words, all the text for campaign that we coded as potential gold for using as quotes when writing up.",
    "crumbs": [
      "Going Further",
      "**Coding Workflows**",
      "Coding Matrix Query"
    ]
  },
  {
    "objectID": "going-further/creating-framework-matrix.html",
    "href": "going-further/creating-framework-matrix.html",
    "title": "Creating a Framework Matrix",
    "section": "",
    "text": "To create a framework matrix, we first need to navigate to the location where they are stored:\n\nNotes &gt; Framework Matrices\n\n\nThen, to create a new framework matrix:\n\n\nRight-click in white space.\nSelect ‘New Framework Matrix…’\n\n\n\nThis will bring up the ‘New Framework Matrix’ dialogue:\n\n\nProvide it with a suitable name.\n\n\n\nAfter that:\n\n\nSelect the Rows tab.\nUse the left-hand ‘Select’ button to open a dialogue and select the Participant case folder.\nUse the right-hand ‘Select’ button to open a dialogue and select 1-4 attributes from the People classification that will be used to sort how the rows for participant cases will be ordered.\n(Optional) if you pick more than one attribute, you can use the up/down arrows on the right, in blue, to change their order.\n\n\n\nFinally:\n\n\nSelect the Colums tab.\nUse the ‘Select’ button to pick codes to use as columns, in this case select the ‘Auto-Code (Sections)’ folder.\n(Optional) use the arrows on the right to change the order of the codes.\n\n\n\nHit ‘OK’ and after a few seconds the Framework Matrix will have been created and will automatically open.",
    "crumbs": [
      "Going Further",
      "**Framework Matrices**",
      "Creating a Framework Matrix"
    ]
  },
  {
    "objectID": "Designing your Nvivo project.html",
    "href": "Designing your Nvivo project.html",
    "title": "Design your own Nvivo project: first steps",
    "section": "",
    "text": "Before you start building your own Nvivo project,it’s a good idea to think through the components and likely structure in advance:\n🤔 Ask yourself about the following:\n\n\nWhat types of data and files do I have?\nThese need to be digitized, but could include text items like…\n- transcripts of interviews/focus groups \n- quantitative metadata\n- field notes \n- research tools\n- policy documents\n- literature \n- archive materials\nIt is also possible to include things like..\n- photographs or images\n- video/audio \n- maps \nCAUTION: adding large files to Nvivo slows the software down dramatically.\nFor that reason we advise against using Nvivo for compiling many PDF articles, for example. Referencing software might be better for managing academic literature. The same goes for video/audio files.\nIt is helpful to imagine how these things are best organised in a file hierarchy.\n\n\nWhat are the main units of analysis?\nThese could be individuals you’ve interviewed, organisations you’ve studied, communities you’ve worked in, etc. And you could have nested units at different levels (e.g. individuals nested in communities).\nThese units of analysis might later get created as ‘cases’ in the Nvivo project file, which enable you to keep information about that case all in one place.\nFor example, a case within a project file might represent an individual, with multiple linked interview transcripts, some fieldnotes, and some metadata telling of their demographics.\nThese cases and case structures can evolve as you conduct your research, too.\n\n\nWhat are the characteristics of these units?\nNow consider what characteristics of these units you have measured. For example, for individuals you have interviewed, you might have socioedemographic data recorded (e.g. age, sex, education) This would be known as metadata, and might be recorded in a spreadsheet or table.\n\n\nWhat are the linkages within the project?\nThis might be files that are linked within a single case or individual, for example an individual who has 2 sequential interview transcripts. Or, it might be linkages between different individuals or cases who live in the same household.\n\n\nWhat are likely to be key topics or themes?\nThis may be unknown at this stage, but you might imagine some key/core themes based on your research question such as ‘trust in institutions’, ‘sense of loss’, etc.\nThese themes might become ‘codes’ within your Nvivo project."
  },
  {
    "objectID": "Nvivo versions.html",
    "href": "Nvivo versions.html",
    "title": "Nvivo versions",
    "section": "",
    "text": "In recent years, there have been several different releases of QSR Nvivo software, in both Windows and Mac versions. Different institutions may subscribe to different versions.\nThis matters because some features differ and compatibility cannot always be assumed, which can be quite annoying. Where possible, we recommend working with a windows version, because you have more advanced features available. Some windows features are ‘hidden’ for the mac versions.\nThe most commonly encountered versions :\n Between Nvivo versions, there is forwards compatibility only. This means that you can open an Nvivo nvp file made in Nvivo 12 in Nvivo Release 1, but not the other way around. To open an older file in a more recent version, open the file, and then click ‘upgrade’."
  },
  {
    "objectID": "Nvivo versions.html#how-many-versions-of-nvivo-are-there",
    "href": "Nvivo versions.html#how-many-versions-of-nvivo-are-there",
    "title": "Nvivo versions",
    "section": "",
    "text": "In recent years, there have been several different releases of QSR Nvivo software, in both Windows and Mac versions. Different institutions may subscribe to different versions.\nThis matters because some features differ and compatibility cannot always be assumed, which can be quite annoying. Where possible, we recommend working with a windows version, because you have more advanced features available. Some windows features are ‘hidden’ for the mac versions.\nThe most commonly encountered versions :\n Between Nvivo versions, there is forwards compatibility only. This means that you can open an Nvivo nvp file made in Nvivo 12 in Nvivo Release 1, but not the other way around. To open an older file in a more recent version, open the file, and then click ‘upgrade’."
  },
  {
    "objectID": "Nvivo versions.html#converting-nvivo-files-between-windows-mac-versions",
    "href": "Nvivo versions.html#converting-nvivo-files-between-windows-mac-versions",
    "title": "Nvivo versions",
    "section": "Converting Nvivo files between windows /mac versions",
    "text": "Converting Nvivo files between windows /mac versions\nTo convert .nvp files (windows) to .nvpx (mac), do this within the windows platform, by choosing ‘copy project’-&gt; copy to…\nWe recommend you work on one platform only and avoid frequent conversion."
  },
  {
    "objectID": "Nvivo versions.html#naming-and-terminology-changes",
    "href": "Nvivo versions.html#naming-and-terminology-changes",
    "title": "Nvivo versions",
    "section": "Naming and terminology changes",
    "text": "Naming and terminology changes\nWith Nvivo Release 1.0 (Nvivo 13), QSR changed the terminology for key elements. A full list is here.\nSome important ones to note:"
  },
  {
    "objectID": "Nvivo versions.html#the-guidance-for-your-specific-version-can-be-found-here.",
    "href": "Nvivo versions.html#the-guidance-for-your-specific-version-can-be-found-here.",
    "title": "Nvivo versions",
    "section": "The guidance for your specific version can be found here.",
    "text": "The guidance for your specific version can be found here."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "These online NVivo Guidance and Workshop pages for the Scottish Graduate School of Social Science are produced by:\n\nKatherine Keenan, University of St Andrews and SGSSS Deputy Director\nAlasdair B R Stewart, University of Glasgow and SGSSS Training Network member\nKathryn Fredricks, University of St Andrews\n\nWith additional material from:\n\nRachel Shanks, University of Aberdeen.\n\nThis work is supported by the UKRI Economic and Social Research Council (ESRC).\n\n\n\n\n\n\n\n‘Living Documents’\n\n\n\nThese pages are ‘living documents’, they will continually and iteratively be updated over time.\nI cannot promise additional content will be added within any specific period of time, but I will be taking note of frequently asked questions, different use cases, and any issues encountered. These will be used to update and add to the existing content.\nSimilarly, following any of the sessions – or if you were unable to attend the in-person workshops and are following along online - please feel free to email any questions: alasdair.stewart@glasgow.ac.uk or katherine.keenan@st-andrews.ac.uk.\nNote - we take absolutely no offense if your question is due to any of the materials being unclear! In all our time teaching, the most useful feedback we have received has been from students pointing out something that was unclear to them or raised further questions."
  },
  {
    "objectID": "Importing files.html",
    "href": "Importing files.html",
    "title": "Importing files",
    "section": "",
    "text": "Import 2016 interview files\n\nFrom the Import Ribbon, select ‘Files’.\nNavigate to your saved folders and open “2016 Interviews”.\nSelect the 14 transcript files (saved by first name), and click ‘open’:\n\n\n\n\nAutomatically create cases as you import\nNext, a box will pop up:\n\n\n\nTick the box in the import window to ‘Create a case for each imported file’ (1).\nAs this is a new project, select “create new classification” and label it ‘people’ then click ‘import’ (2).\nClick import (3)\n\n\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nIf your Nvivo hangs or says ‘not responding’ when you import files, don’t panic. This is normal Nvivo behaviour and usually resolves. It is a fussy program and if you have an older machine it can sometimes take a while to perform some actions. It does crash from time to time, which is why its important to save your work as you go.\n\n\n\n\n\n\n\n\n\nWhat is a ‘case’ in Nvivo?\n\n\n\nA case represents a unit of analysis, and this is most commonly people you’ve interviewed, organisations you worked with, communities, families, etc. In this example, cases are people that have been interviewed. But it could be any kind of unit: people, places, organizations, events or other entities that you want to analyze and compare. Cases allow you to link information together related to that person, place or organisation. It makes it easy for you to see everything related to a single unit in one place. See the page on cases and case classifications for more info. Not all projects require cases, but if you make comparisons across people or any other units, it’s a good idea as opens up many other functionalities.\n\n\n\n\nAfter Import\nYou will see your uploaded files appear in ‘Files’:\n\n\n\nYou can see that cases have been created for these 14 people by scrolling down the left-hand menu to ‘cases’:\n\n\n\nFor each person, they now have a ‘case’ icon (1) and 1 file associated (the transcript) (2); they have been created under the classification ‘People’.\n\n\n\nWe’ll come back to cases in a moment.\n\n\nOrganise interview transcripts into a folder\n\nCreate a new folder under files by right clicking on files, select ‘new folder’,name it ‘2016 Interviews’, add a brief description of you like, click OK to finish.\n\n\n\n\nMove files to the 2016 Interviews folder, by selecting all (ctrl+A) and dragging and dropping to the new folder.\n\n\n\n\nCreate a folder structure\n\nRight click on ‘Files’ in the Navigation View and create new folders for:\n\n2015 pre-election FGDs\nLiterature\nResearch tools\n\n\n\n\n\nImport 2015 focus group data\n\nRight click on the ‘2015 pre-election FGDs’ folder in the Navigation view and select ‘Import Files’\nIn the pop-up window, navigate to your saved folder for 2015 FGDs Import the three transcripts.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAs you have already created cases when you imported the transcripts, DO NOT create cases again.\n\nInstead, ensure that the box for ‘Create a case for each imported file’ is unticked.\n\n\n\n\n\nImport research tools but not metadata\nWe can also import files to by directly dragging and dropping them from your file explorer into NVivo.\n\nTo populate our ‘research tools’ folder, open the ‘other documents’ folder on your computer. Select all of the MS word documents (i.e. do not select ‘metadata’ excel file) and drag-and-drop them into list view space.\n\n\n\n\nImport literature\nImport ‘Lit’ files to ‘Lit’ folder.\nUsing the method of your choice, import the 3 files from the ‘Lit’ folder from your downloads into the ‘Lit’ folder in NVivo\nRemember, DO NOT create new cases.",
    "crumbs": [
      "Project Setup",
      "**Set up a new project**",
      "Importing files"
    ]
  },
  {
    "objectID": "Question coding autocoding.html",
    "href": "Question coding autocoding.html",
    "title": "Question coding: autocoding approach",
    "section": "",
    "text": "Autocoding approach\nQuestion coding manually is incredibly repetitive and therefore well suited to automation.\nOnce again, you must ensure transcripts are appropriately formatted to take advantage of autocoding features.\n\n\nFirst, ensure that all of the question headers (e.g. ‘Leave Campaign” ’Voting Decision’ etc ) are formatted in MS Word using the same style (e.g. heading 1’). Check this by opening up a transcript, go to ‘edit’, find a question heading and checking how it’s formatted. Here you can see the headings are formatted as ‘heading 1’:\n\n\n\nYou are best to do this before uploading the documents to NVivo, although it is possible to do this formatting within NVivo.\nWe are going to autocode all interview transcripts at once.\n\n\ngo into the folder ‘2016 Interviews’ select all (Ctrl+A) (1)\nthen click autocode (2)\nOn the autocode wizard box, select ‘paragraph styles’ (3)\nClick next (4)\n\n\n\n\n\nOn step 2 of the autocode wizard, you will see the possible paragraph styles. Select ‘heading 1’ and click ‘next’\n\n\n\n\n\nOn step 3 of the wizard, you are asked to choose where to store the codes.\nHere we choose to create a new folder (2)and call this ‘Interviews by question’(2)\nClick finish (3).\n\n\n\n\n\nSee the results of the autocoding by clicking into the folder ‘Interviews by question’ that you have just created.\nYou can view the text that is coded to any code e.g. ‘Leave Campaign’ by double clicking it. On the right hand side you can see excerpts from across different transcripts coded to this code.\n\n\n\n\n\nTidying up autocoding: merging codes\nSome codes are very similar e.g. ‘THE DAY OF THE REFERENDUM’ and ‘THE DAY OF THE REFERENDUM 2’ - let’s merge these.\n\n\nFirst, highlight one of them e.g. ‘THE DAY OF THE REFERENDUM 2’ and right click -&gt;copy.\n\n\n\n\n\nThen click on the other one i.e. ‘THE DAY OF THE REFERENDUM’, right click, then choose ‘Merge into selected code’ .\n\n\n\n\n\nOn the pop up box, you have the chance to change the settings about what you merge, we just stick with the default:\n\n\n\nYou will notice that the number of codes for ‘THE DAY OF THE REFERENDUM’ had increased.\nYou can delete the one you just copied ‘’THE DAY OF THE REFERENDUM 2’.\n\n\nExtra video tutorials about autocoding\nAfter the class, you may find these additional video tutorials useful:",
    "crumbs": [
      "Start Coding",
      "**Coding in NVivo**",
      "Question coding: autocoding approach"
    ]
  },
  {
    "objectID": "primers.html",
    "href": "primers.html",
    "title": "Primers on qualitative data and analysis",
    "section": "",
    "text": "If you have never had formal masters-level training in qualitative enquiry, we recommend you follow some introductory material before you atten the NVivo workshops. This will help you get the most out of the day."
  },
  {
    "objectID": "primers.html#what-is-qualitative-enquiry-and-data",
    "href": "primers.html#what-is-qualitative-enquiry-and-data",
    "title": "Primers on qualitative data and analysis",
    "section": "What is qualitative enquiry and data?",
    "text": "What is qualitative enquiry and data?\nEngage with one or all of the following:\n\nThe Discipline and Practice of Qualitative Research which is Chapter 1 in Denzin and Lincoln, eds. (2018) The SAGE Handbook of Qualitative Research. 5th ed. London: SAGE Publications.\nIntroduction to qualitative research methods - Part 1 by Bhangu, Provost, and Caduff (2023) in Perspectives in Clinical Research 14(1) pp.39-42\nQualitative research the basics YouTube video by Degree Doctor (Dr Elizabeth Yardley)"
  },
  {
    "objectID": "primers.html#what-is-coding",
    "href": "primers.html#what-is-coding",
    "title": "Primers on qualitative data and analysis",
    "section": "What is coding?",
    "text": "What is coding?\n\nAn Introduction to Codes and Coding which is Chapter 1 in Saldaña (2013) The Coding Manual for Qualitative Researchers. 2nd ed. London: Sage Publications Ltd."
  },
  {
    "objectID": "primers.html#what-is-thematic-analysis",
    "href": "primers.html#what-is-thematic-analysis",
    "title": "Primers on qualitative data and analysis",
    "section": "What is thematic analysis?",
    "text": "What is thematic analysis?\nThematic analysis is a commonly used method within qualitative analysis, suitable for using with software like NVivo.\nPapers:\n\nBraun, Virginia, and Victoria Clarke (2006) ‘Using Thematic Analysis in Psychology’. Qualitative Research in Psychology 3(2):77–101. doi: 10.1191/1478088706qp063oa.\nBraun, Virginia, and Victoria Clarke (2019) ‘Reflecting on Reflexive Thematic Analysis’. Qualitative Research in Sport, Exercise and Health 11(4):589–97. doi: 10.1080/2159676X.2019.1628806.\nByrne, David. (2022) ‘A Worked Example of Braun and Clarke’s Approach to Reflexive Thematic Analysis’. Quality & Quantity 56(3):1391–1412. doi: 10.1007/s11135-021-01182-y.\nKiger, Michelle E., and Lara Varpio. (2020) ‘Thematic Analysis of Qualitative Data: AMEE Guide No. 131’. Medical Teacher 42(8):846–54. doi: 10.1080/0142159X.2020.1755030.\n\nYouTube:\n\nThematic analysis in qualitative research by Degree Doctor (Dr Elizabeth Yardley)\n\n\nReflexive Thematic analysis (Braun and Clarke) : lectures and videos\n\nA foundational textbook on this approach with interactive online content.\n\nAccompanying youtube lectures:"
  },
  {
    "objectID": "Cases.html",
    "href": "Cases.html",
    "title": "Cases",
    "section": "",
    "text": "Recap: what is an Nvivo case?\n\nIn Nvivo, a case represents a unit of analysis.\n\nThis could be:\n\npeople you’ve interviewed,\nevents,\norganisations you worked with,\ncommunities,\nfamilies, etc.\n\nBasically anything you want to organise and compare.\nBefore you build a new project, you should decide what are your cases/units of analysis.\nIn this QESB project, we have created cases for every person with a 1-2-1 interview; heer you can see Claire’s case highlighted:\n\nand you can see that each person has 1 file associated with them (the interview transcript).\n\n\nand why do I need cases?\nCases allow you to link information together related to unit. They help you to connect and draw material across your files. They are also very useful if you want to add metadata (e.g. sociodemographic info)\nSome examples:\n\nConnect text from focus groups to cases of individuals;\nConnect photos, maps, audio, to cases of events;\n\nConnect parliamentary debates to cases of policy /laws.\n\nHere’s an example taken from an Nvivo explainer on cases:\n\nYou don’t have to use cases, but doing us unlocks a lot of extra functionality, and it makes a lot of sense if you have anything more than just a few transcripts.",
    "crumbs": [
      "Project Setup",
      "**Set up a new project**",
      "Cases"
    ]
  },
  {
    "objectID": "The dataset.html",
    "href": "The dataset.html",
    "title": "Qualitative Election Study of Britain",
    "section": "",
    "text": "We will use data from a longitudinal qualitative study called the Qualitative Election Study of Britain.\nHere’s an explanation of the study by it’s leads:\nHear a little bit about the study from one of its PIs, Ediza Carvalho, based at the University of Dundee:\nThe data is open access and available from the UK Data Service.\nWe chose this dataset because it contains a variety of file formats, including focus group discussions and in-depth interviews conducted around elections and referenda which are related over time in 2010, 2014, 2015, 2016, and 2017.",
    "crumbs": [
      "Project Setup",
      "**The Dataset**",
      "Qualitative Election Study of Britain"
    ]
  },
  {
    "objectID": "The dataset.html#the-data-subset-we-are-using",
    "href": "The dataset.html#the-data-subset-we-are-using",
    "title": "Qualitative Election Study of Britain",
    "section": "The data subset we are using",
    "text": "The data subset we are using\nThe data we will be working with was collected in 2015 and 2016, and were timed to collect opinions prior to the UK 2015 General Election, and just after the EU or ‘Brexit’ Referendum. This period was one of great political unpredictability and voter volatility. Both of those votes had controversial and unexpected results: the 2015 Election was a surprise win for the Conservatives, and in Scotland, the Scottish National Party made huge gains over Labour. The 2016 EU referendum resulted in a 52% vote to leave the European Union, and this marked a change in the UK’s relationship with Europe and the rest of the world.\n\nThe data extract we are using allows longitudinal linkage because some of the people who took part in the 2015 focus groups later participated in a 1-2-1 telephone interview.\nThe data citations:\nCarvalho, E., Winters, K. (2019). Qualitative Election Study of Britain, 2015. [data collection]. UK Data Service. SN: 8117, DOI\nCarvalho, E., Winters, K., Oliver, T. (2023). The Qualitative Election Study of Britain: The EU Referendum Interviews Dataset, 2016. [data collection]. UK Data Service. SN: 856170, DOI\nSome more information:\nCarvalho, Edzia and Winters, Kristi and Oliver, Thom (2023). The Qualitative Election Study of Britain: The EU Referendum Interviews Dataset, 2016. [Data Collection]. Colchester, Essex: UK Data Service. 10.5255/UKDA-SN-856170",
    "crumbs": [
      "Project Setup",
      "**The Dataset**",
      "Qualitative Election Study of Britain"
    ]
  },
  {
    "objectID": "The dataset.html#open-research",
    "href": "The dataset.html#open-research",
    "title": "Qualitative Election Study of Britain",
    "section": "Open research",
    "text": "Open research\nThis dataset is a brilliant example of Open Science: the data are open access but also organised to promote reusability. This is good practice, and there a lot of resources to help guide you on the use and reuse of secondary data, and how you can play your part.\nFor more information on open research and data:\n\nThe FAIR principles to improve the findability, accessibility, interoperability, and reuse of digital assets.\nUK Data Service hub for archiving qualitative data and secondary analysis.\nTake one of these free data skills modules from the UK Data Service which covers topics like research data management, finding secondary data, data resuse and many more topics.\n\n\n\nOpen Qualitative Research\n\n\n\n\n\n\n🤢 It’s not you, it’s NVivo\n\n\n\nImportant to making data and analysis open is storing it in an ‘interoperable’ and ‘open’ format. Interoperable means that the files are not restricted to being opened by a specific single application, such as NVivo. An open standard is one that is available for anyone to use, share, or access - where it could be opened on NVivo, Atlas.ti, and so on.\nFully ‘open research’ remains limited within qualitative research for various reasons. One important limitation is whilst there is an interoperable open QDPX format for sharing qualitative data analysis projects, it is a ‘lossy’ format – where folder structures and more are lost when exporting to the open format.\nSo, although it is possible to export to QDPX and import it to a different application - such as exporting from NVivo and importing in Atlas.ti - any folder structure and other aspects would be lost in the process.",
    "crumbs": [
      "Project Setup",
      "**The Dataset**",
      "Qualitative Election Study of Britain"
    ]
  },
  {
    "objectID": "Start coding.html",
    "href": "Start coding.html",
    "title": "What is coding?",
    "section": "",
    "text": "Section Overview\n\n\n\nWithin this section we will cover the conceptual grounding for qualitative coding and set through the basic processes for creating codes and coding within NVivo.\n\n\n\nWhat are codes?\n\nCodes are tags or containers for complex qualitative data; they are a way to index, sort, link and interrogate data.\nThe process of coding involves finding ways of summarizing key meanings within your data.\nThe same piece of text can have multiple meanings or codes.\n\n\n\n\nDeductive vs inductive coding\nIn deductive coding, you approach your dataset with a pre-established list of codes, often based off existing theoretical frameworks or even the research tools themselves (e.g. the questions that were asked). This is a more top-down, etic approach that is most useful for confirming or testing existing theories, or imposing organizational and structure into your file (e.g. coding by interview guide or research questions).\nConversely, inductive coding occurs when you allow codes to emerge from your engagement with the dataset itself, with no preconceived categories. This is a bottom up, emic approach to coding.\nYour own approach may be heavily influenced by your discipline, research aims, and research questions.\nHowever, most work will be situated in a hybrid space between the two.\n\n\nCoding as iterative\nSorry folks, qualitative coding is far from one-and-done. Coding is a cyclical, ongoing process. Interviews cannot be read and coded just once. As we re-read our datasets, we continue to develop new codes and subcodes, and refine our understanding of the data. Each time we read our material, we gain a deeper level of understanding each time we read our transcripts. With each pass, we will notice new things, which may prompt us to read new academic articles or ask different questions. This work will in turn shape what we see and understand in our next reading of the dataset. Nvivo can help us organise and interrogate codes but coding is led by the researcher.\n\n\nThe practice of coding\nRemember, when coding in Nvivo:\n\nCodes can overlap\nCodes will sort themselves to be alphabetical list – so clear, direct, short codes are helpful.\nConsider your future self (and any collaborators), and try to annotate your coding by always including a code description: what you think this code means and what should be included here\nCodes should change as your project changes. They can be combined and rearranged.\nDon’t be afraid to make a code because you’re uncertain if it will be relevant or important enough. They’re a tool to think with and can always be adjusted later.\n\nBe careful: try not to code when tired, bored, or distracted – you must always be actively thinking (the ‘organic computer’ [your brain] is the primary tool of analysis).\n\n\n\nAutocoding?\nYou might have heard about autocoding in Nvivo. Don’t worry- it is not advanced enough to replace the essential work of a researcher.\nThis is currently a basic - but often useful- functionality in Nvivo. It can help you organise the text into cases or themes based on pre-defined criteria (we’ll show you these below!)\nHowever it is the researcher’s job to interpret and make meaning from data.\n\n\nDifferent approaches to coding - learn more\nSee resources tab for more information about various approaches to coding.",
    "crumbs": [
      "Start Coding",
      "What is coding?"
    ]
  }
]